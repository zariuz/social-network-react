{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.css","redux/dialogs-reducer.ts","hoc/withAuthRedirect.tsx","components/Users/User/User.module.css","assets/images/preloader.svg","components/News/News.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileDataForm/ProfileDataFormReduxForm.module.css","components/Login/Login.module.css","components/NotFound/NotFound.module.css","components/common/FormsControls/FormsControls.tsx","utilities/validators/validators.ts","components/Navbar/Navbar.module.css","api/api.ts","api/profile-api.ts","redux/profile-reducer.ts","redux/sidebar-reducer.ts","api/users-api.ts","redux/users-reducer.ts","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/Navbar/Navbar.tsx","components/common/Pagination/Pagination.tsx","components/Users/User/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/common/Preloader/Preloader.tsx","components/Users/UsersPage.tsx","components/News/News.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileDataForm/ProfileDataFormReduxForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/LoginPage.tsx","components/NotFound/NotFound.tsx","App.tsx","hoc/withSuspense.tsx","index.tsx","assets/images/user.png","components/common/FormsControls/FormsControls.module.css","components/common/Pagination/Pagination.module.css","components/Header/Header.module.css"],"names":["module","exports","initialState","dialogs","id","name","messages","message","actions","sendMessage","newMessageBody","type","dialogsReducer","state","action","body","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","Textarea","input","meta","touched","error","placeholder","hasError","className","styles","formControl","Input","required","value","maxLengthCreator","maxLength","length","resultCodesEnum","resultCodesForCaptcha","instance","axios","create","withCredentials","baseURL","headers","profileAPI","userId","get","then","res","data","status","put","photoFile","formData","FormData","append","profile","posts","likesCount","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","profileReducer","newPost","filter","p","sidebarReducer","usersAPI","currentPage","pageSize","term","friend","users","portionSize","totalUsersCount","isFetching","followingInProgress","count","payload","requestUsers","items","totalCount","usersReducer","map","u","followed","authAPI","email","password","remeberMe","captcha","post","delete","securityAPI","login","captchaUrl","getAuthUserData","meData","resultCode","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Navbar","s","nav","item","activeClassName","active","Pagination","onPageChanged","x","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","onClick","cn","selectedPage","pageNumber","key","User","unfollow","follow","user","style","avatar","alt","src","small","userPhoto","disabled","some","getUsers","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","Preloader","preloader","UsersPage","pageTitle","News","main","Post","maxLength15","reduxForm","handleSubmit","Field","component","addPost","postsElements","reverse","postsBlock","ProfileStatusWithHooks","editMode","setEditMode","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","maxLength30","ProfileDataFormReduxForm","Object","keys","contacts","formSummaryError","ProfileData","isOwner","goToEditMode","facebook","website","vk","twitter","instagram","youtube","github","mainLink","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileInfo","savePhoto","saveProfile","description","large","target","files","Profile","ProfileContainer","this","match","params","authorizedUserId","getStatus","console","refreshProfile","prevProps","prevState","Component","file","getState","Error","stopSubmit","_error","Promise","reject","withRouter","Header","header","loginBlock","logout","HeaderContainer","LoginReduxForm","LoginPage","loginData","CaptchaIsRequired","NotFound","notfound","DialogsContainer","lazy","SuspendedDialogs","Suspense","fallback","App","initializeApp","exact","path","render","ReactDOM","document","getElementById"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,sFCW/DC,EAAe,CACjBC,QAAS,CACP,CAAEC,GAAI,GAAIC,KAAM,SAChB,CAAED,GAAI,GAAIC,KAAM,UAChB,CAAED,GAAI,GAAIC,KAAM,SAChB,CAAED,GAAI,GAAIC,KAAM,SAChB,CAAED,GAAI,GAAIC,KAAM,SAElBC,SAAU,CACR,CAAEF,GAAI,EAAGG,QAAS,MAClB,CAAEH,GAAI,EAAGG,QAAS,mBAClB,CAAEH,GAAI,EAAGG,QAAS,MAClB,CAAEH,GAAI,EAAGG,QAAS,MAClB,CAAEH,GAAI,EAAGG,QAAS,QAkBTC,EAAU,CACrBC,YAAa,SAACC,GAAD,MACV,CACCC,KAAM,eACND,oBAISE,IAtBQ,WAAmE,IAAlEC,EAAiE,uDAAzDX,EAAcY,EAA2C,uCACvF,OAAQA,EAAOH,MACb,IAAK,eACH,IAAII,EAAOD,EAAOJ,eAClB,OAAO,2BACFG,GADL,IAEEP,SAAS,GAAD,mBAAMO,EAAMP,UAAZ,CAAsB,CAAEF,GAAI,EAAGG,QAASQ,OAGpD,QACE,OAAOF,K,+GClCTG,EAA6B,SAACH,GAAD,MAC9B,CACCI,OAAQJ,EAAMK,KAAKD,SAQhB,SAASE,EAAsBC,GAmBpC,OAVqCC,YAMnCL,EACA,GAPmCK,EARiC,SAACC,GAAW,IAC1EL,EAAyBK,EAAzBL,OAAWM,EAD8D,YAChDD,EADgD,YAG/E,OAAKL,EAEE,kBAACG,EAAsBG,GAFV,kBAAC,IAAD,CAAUC,GAAG,gB,oBClBrCxB,EAAOC,QAAU,CAAC,OAAS,uB,oBCD3BD,EAAOC,QAAU,IAA0B,uC,oBCC3CD,EAAOC,QAAU,CAAC,KAAO,qB,oBCAzBD,EAAOC,QAAU,CAAC,KAAO,qB,oBCAzBD,EAAOC,QAAU,CAAC,YAAc,mC,oBCAhCD,EAAOC,QAAU,CAAC,iBAAmB,qD,oBCArCD,EAAOC,QAAU,CAAC,iBAAmB,kC,oBCArCD,EAAOC,QAAU,CAAC,SAAW,6B,sECD7B,yGAUawB,EAAiC,SAAC,GAKxC,IAJLC,EAII,EAJJA,MAII,IAHJC,KAAQC,EAGJ,EAHIA,QAASC,EAGb,EAHaA,MACjBlB,EAEI,EAFJA,KACAmB,EACI,EADJA,YAEMC,EAAWH,GAAWC,EAE5B,OACE,yBAAKG,UAAS,UAAKC,IAAOC,YAAZ,YAA2BH,EAAWE,IAAOJ,MAAQ,KACjE,8CAAcH,EAAd,CAAqBf,KAAMA,EAAMmB,YAAaA,KAC7CC,GAAY,8BAAOF,KAKbM,EAA8B,SAAC,GAKrC,IAJLT,EAII,EAJJA,MAII,IAHJC,KAAQC,EAGJ,EAHIA,QAASC,EAGb,EAHaA,MACjBlB,EAEI,EAFJA,KACAmB,EACI,EADJA,YAEMC,EAAWH,GAAWC,EAE5B,OACE,yBAAKG,UAAS,UAAKC,IAAOC,YAAZ,YAA2BH,EAAWE,IAAOJ,MAAQ,KACjE,2CAAWH,EAAX,CAAkBf,KAAMA,EAAMmB,YAAaA,KAC1CC,GAAY,8BAAOF,M,gCCnC1B,oEAAO,IAAMO,EAA+B,SAACC,GAC3C,IAAIA,EAIJ,MAAO,qBAGIC,EAAmB,SAACC,GAAD,OAA2C,SAACF,GAC1E,GAAIA,GAASA,EAAMG,OAASD,EAC1B,MAAM,iBAAN,OAAwBA,EAAxB,e,+DCXJvC,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,OAAS,yB,4CCgBrEwC,EAKAC,E,2GAnBCC,E,OAAWC,EAAMC,OAAO,CACnCC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACP,UAAW,2C,SAUHP,O,qBAAAA,I,kBAAAA,M,cAKAC,O,2CAAAA,M,KCfL,IAAMO,EAAa,SACbC,GACT,OAAOP,EAASQ,IAAT,kBAAqCD,IAAUE,MAAK,SAACC,GAAD,OAASA,EAAIC,SAF/DL,EAAa,SAIdC,GACR,OAAOP,EAASQ,IAAT,yBAAuCD,IAAUE,MAAK,SAACC,GAAD,OAASA,EAAIC,SALjEL,EAAa,SAOXM,GACX,OAAOZ,EACJa,IADI,iBACmC,CAAED,OAAQA,IACjDH,MAAK,SAACC,GAAD,OAASA,EAAIC,SAVZL,EAAa,SAYdQ,GACR,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,QAASH,GAClBd,EACJa,IADI,gBAC6DE,EAAU,CAC1EV,QAAS,CACP,eAAgB,yBAGnBI,MAAK,SAACC,GAAD,OAASA,EAAIC,SArBZL,EAAa,SAuBZY,GACV,OAAOlB,EAASa,IAAT,UAAyCK,GAAST,MAAK,SAACC,GAAD,OAASA,EAAIC,S,QC1BzEpD,EAAe,CACnB4D,MAAO,CACL,CAAE1D,GAAI,EAAGG,QAAS,mBAAoBwD,WAAY,GAClD,CAAE3D,GAAI,EAAGG,QAAS,qBAAsBwD,WAAY,GACpD,CAAE3D,GAAI,EAAGG,QAAS,KAAMwD,WAAY,MAEtCF,QAAS,KACTN,OAAQ,IA6CG/C,EAAU,CACrBwD,qBAAsB,SAACC,GAAD,MACnB,CACCtD,KAAM,WACNsD,gBAEJC,eAAgB,SAACL,GAAD,MACb,CACClD,KAAM,mBACNkD,YAEJM,UAAW,SAACZ,GAAD,MACR,CACC5C,KAAM,aACN4C,WAEJa,WAAY,SAACC,GAAD,MACT,CACC1D,KAAM,cACN0D,WAEJC,iBAAkB,SAACC,GAAD,MACf,CACC5D,KAAM,qBACN4D,YAIOC,EAAiB,SAACtB,GAAD,8CAA+B,WAAOuB,GAAP,eAAAC,EAAA,sEACxCzB,EAAsBC,GADkB,OACrDI,EADqD,OAE3DmB,EAASjE,EAAQ0D,eAAeZ,IAF2B,2CAA/B,uDA8CfqB,EApHQ,WAAmE,IAAlE9D,EAAiE,uDAAzDX,EAAcY,EAA2C,uCACvF,OAAQA,EAAOH,MACb,IAAK,WACH,IAAMiE,EAAU,CACdxE,GAAI,EACJG,QAASO,EAAOmD,YAChBF,WAAY,GAEd,OAAO,2BACFlD,GADL,IAEEiD,MAAM,GAAD,mBAAMjD,EAAMiD,OAAZ,CAAmBc,MAG5B,IAAK,mBACH,OAAO,2BACF/D,GADL,IAEEgD,QAAS/C,EAAO+C,UAGpB,IAAK,aACH,OAAO,2BACFhD,GADL,IAEE0C,OAAQzC,EAAOyC,SAGnB,IAAK,cACH,OAAO,2BACF1C,GADL,IAEEiD,MAAOjD,EAAMiD,MAAMe,QAAO,SAACC,GAAD,OAAOA,EAAE1E,KAAOU,EAAOuD,YAGrD,IAAK,qBACH,OAAO,2BACFxD,GADL,IAEEgD,QAAQ,2BAAMhD,EAAMgD,SAAb,IAAsBU,OAAQzD,EAAOyD,WAGhD,QACE,OAAO1D,I,SCrDPX,EAAe,GAQN6E,EAJQ,WAA0D,IAAzDlE,EAAwD,uDAAhDX,EAC9B,OAAOW,GCHImE,EAAW,WAMnB,IAJDC,EAIA,uDAJc,EACdC,EAGA,uDAHW,GACXC,EAEA,uDAFe,GACfC,EACA,uDADyB,KAEzB,OAAOzC,EACJQ,IACC,qBAAc8B,EAAd,kBAAmCC,EAAnC,iBAAoDC,IACtC,OAAXC,EAAkB,GAAlB,kBAAkCA,KAEtChC,MAAK,SAACC,GAAD,OAASA,EAAIC,SCVnBpD,EAAe,CACnBmF,MAAO,GACPH,SAAU,GACVI,YAAa,GACbC,gBAAiB,EACjBN,YAAa,EACbO,YAAY,EACZC,oBAAqB,GACrBZ,OAAQ,CACNM,KAAM,GACNC,OAAQ,OA6DC5E,EAaD,SAAC6E,GAAD,MAAwB,CAAE1E,KAAM,YAAa0E,UAb5C7E,EAeK,SAACyE,GAAD,MACb,CACCtE,KAAM,mBACNsE,gBAlBOzE,EAqBS,SAAC+E,GAAD,MACjB,CACC5E,KAAM,wBACN+E,MAAOH,IAxBA/E,EA2BO,SAACgF,GAAD,MACf,CACC7E,KAAM,qBACN6E,eA9BOhF,EAuCA,SAACqE,GAAD,MACR,CAAElE,KAAM,sBAAuBgF,QAASd,IAGhCe,EAAe,SAC1BX,EACAC,EACAL,GAH0B,8CAIZ,WAAOJ,GAAP,eAAAC,EAAA,6DACdD,EAASjE,GAAyB,IAClCiE,EAASjE,EAAuByE,IAChCR,EAASjE,EAAkBqE,IAHb,SAKKG,EAAkBC,EAAaC,EAAUL,EAAOM,KAAMN,EAAOO,QALlE,OAKR9B,EALQ,OAMdmB,EAASjE,GAAyB,IAClCiE,EAASjE,EAAiB8C,EAAKuC,QAC/BpB,EAASjE,EAA2B8C,EAAKwC,aAR3B,2CAJY,uDAiCbC,EArIM,WAAmE,IAAlElF,EAAiE,uDAAzDX,EAAcY,EAA2C,uCACrF,OAAQA,EAAOH,MACb,IAAK,SACH,OAAO,2BACFE,GADL,IAEEwE,MAAOxE,EAAMwE,MAAMW,KAAI,SAACC,GACtB,OAAIA,EAAE7F,KAAOU,EAAOoC,OACX,2BAAK+C,GAAZ,IAAeC,UAAU,IAEpBD,OAGb,IAAK,WACH,OAAO,2BACFpF,GADL,IAEEwE,MAAOxE,EAAMwE,MAAMW,KAAI,SAACC,GACtB,OAAIA,EAAE7F,KAAOU,EAAOoC,OACX,2BAAK+C,GAAZ,IAAeC,UAAU,IAEpBD,OAGb,IAAK,YACH,OAAO,2BACFpF,GADL,IAEEwE,MAAOvE,EAAOuE,QAElB,IAAK,mBACH,OAAO,2BACFxE,GADL,IAEEoE,YAAanE,EAAOmE,cAExB,IAAK,wBACH,OAAO,2BACFpE,GADL,IAEE0E,gBAAiBzE,EAAO4E,QAE5B,IAAK,qBACH,OAAO,2BACF7E,GADL,IAEE2E,WAAY1E,EAAO0E,aAEvB,IAAK,+BACH,OAAO,2BACF3E,GADL,IAEE4E,oBAAqB3E,EAAO0E,WAAP,sBACb3E,EAAM4E,qBADO,CACc3E,EAAOoC,SACtCrC,EAAM4E,oBAAoBZ,QAAO,SAACzE,GAAD,OAAQA,IAAOU,EAAOoC,YAE/D,IAAK,sBACH,OAAO,2BAAKrC,GAAZ,IAAmBgE,OAAQ/D,EAAO6E,UAEpC,QACE,OAAO9E,IC3DAsF,EAAU,WAEnB,OAAOxD,EACJQ,IADI,WAEJC,MAAK,SAACC,GAAD,OAASA,EAAIC,SAJZ6C,EAAU,SAOnBC,EACAC,GAGC,IAFDC,EAEA,wDADAC,EACA,uDADyB,KAEzB,OAAO5D,EACJ6D,KADI,aAGW,CACdJ,QACAC,WACAC,YACAC,YAEDnD,MAAK,SAACC,GAAD,OAASA,EAAIC,SArBZ6C,EAAU,WAwBnB,OAAOxD,EAAS8D,OAAT,cAA8BrD,MAAK,SAACC,GAAD,OAASA,EAAIC,SC9B9CoD,EAAc,WAEvB,OAAO/D,EACJQ,IADI,4BAEJC,MAAK,SAACC,GAAD,OAASA,EAAIC,SCJnBpD,EAAe,CACnBE,GAAI,KACJgG,MAAO,KACPO,MAAO,KACP1F,QAAQ,EACR2F,WAAY,MAgBDpG,EACM,SACfJ,EACAgG,EACAO,EACA1F,GAJe,MAMd,CACCN,KAAM,gBACNgF,QAAS,CAAEvF,KAAIgG,QAAOO,QAAO1F,YATtBT,EAWW,SAACoG,GAAD,MACnB,CACCjG,KAAM,0BACNgF,QAAS,CAAEiB,gBAIJC,EAAkB,yDAAiB,WAAOpC,GAAP,uBAAAC,EAAA,sEACzByB,IADyB,QACxCW,EADwC,QAGnCC,aAAetE,EAAgBuE,UAAU,EACrBF,EAAOxD,KAA5BlD,EADyC,EACzCA,GAAIuG,EADqC,EACrCA,MAAOP,EAD8B,EAC9BA,MACnB3B,EAASjE,EAAwBJ,EAAIgG,EAAOO,GAAO,KALP,2CAAjB,uDA6BlBM,EAAgB,yDAAiB,WAAOxC,GAAP,iBAAAC,EAAA,sEACzBgC,IADyB,OACtCpD,EADsC,OAEtCsD,EAAatD,EAAK4D,IACxBzC,EAASjE,EAA6BoG,IAHM,2CAAjB,uDAadO,EAzEK,WAAmE,IAAlEtG,EAAiE,uDAAzDX,EAAcY,EAA2C,uCACpF,OAAQA,EAAOH,MACb,IAAK,gBACL,IAAK,0BACH,OAAO,2BACFE,GACAC,EAAO6E,SAEd,QACE,OAAO9E,ICpBPX,EAAe,CACnBkH,aAAa,GAeF5G,EACS,iBACjB,CACCG,KAAM,wBAaG0G,EA5BI,WAAmE,IAAlExG,EAAiE,uDAAzDX,EAAcY,EAA2C,uCACnF,OAAQA,EAAOH,MACb,IAAK,sBACH,OAAO,2BACFE,GADL,IAEEuG,aAAa,IAEjB,QACE,OAAOvG,ICLPyG,GAAcC,YAAgB,CAClCC,YAAa7C,EACb8C,YAAa7G,IACb8G,QAAS3C,EACT4C,UAAW5B,EACX7E,KAAMiG,EACNS,KAAMC,IACNC,IAAKT,IAoBDU,GAAmBC,OAAOC,sCAAwCC,IAElEC,GAAQC,YACZd,GACAS,GAAiBM,YAAgBC,OAInCN,OAAOG,MAAQA,GAEAA,U,oGChBAI,GA3BU,WACvB,OACE,yBAAKvG,UAAWwG,KAAEC,KAChB,yBAAKzG,UAAWwG,KAAEE,MAChB,kBAAC,KAAD,CAASlH,GAAG,WAAWmH,gBAAiBH,KAAEI,QAA1C,YAIF,yBAAK5G,UAAWwG,KAAEE,MAChB,kBAAC,KAAD,CAASlH,GAAG,WAAWmH,gBAAiBH,KAAEI,QAA1C,aAIF,yBAAK5G,UAAWwG,KAAEE,MAChB,kBAAC,KAAD,CAASlH,GAAG,SAASmH,gBAAiBH,KAAEI,QAAxC,UAIF,yBAAK5G,UAAWwG,KAAEE,MAChB,kBAAC,KAAD,CAASlH,GAAG,YAAYmH,gBAAiBH,KAAEI,QAA3C,W,2DC4COC,GAvDyB,SAAC,GAUvC,IAJK,IALLtD,EAKI,EALJA,gBACAL,EAII,EAJJA,SAII,IAHJD,mBAGI,MAHU,EAGV,MAFJ6D,qBAEI,MAFY,SAACC,GAAD,OAAOA,GAEnB,MADJzD,mBACI,MADU,GACV,EACA0D,EAAaC,KAAKC,KAAK3D,EAAkBL,GAEzCiE,EAAkB,GACbC,EAAI,EAAGA,GAAKJ,EAAYI,IAC/BD,EAAME,KAAKD,GAGb,IAAIE,EAAeL,KAAKC,KAAKF,EAAa1D,GARtC,EASoCiE,mBAAS,GAT7C,oBASCC,EATD,KASgBC,EAThB,KAUAC,GAAyBF,EAAgB,GAAKlE,EAAc,EAC5DqE,EAAyBH,EAAgBlE,EAE7C,OACE,yBAAKtD,UAAWC,KAAO2H,YACpBJ,EAAgB,GACf,4BAAQK,QAAS,kBAAMJ,EAAiBD,EAAgB,KAAxD,QAEDL,EACEtE,QAAO,SAACC,GAAD,OAAOA,GAAK4E,GAAyB5E,GAAK6E,KACjD3D,KAAI,SAAClB,GACJ,OACE,0BACE9C,UAAW8H,KAAG,gBAET7H,KAAO8H,aAAe9E,IAAgBH,GAEzC7C,KAAO+H,YAETC,IAAKnF,EACL+E,QAAS,WACPf,EAAchE,KAEfA,MAIRwE,EAAeE,GACd,4BACEK,QAAS,WACPJ,EAAiBD,EAAgB,KAFrC,U,yCCUOU,GApDmB,SAAC,GAM5B,IALLzE,EAKI,EALJA,oBACA0E,EAII,EAJJA,SACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,KACAJ,EACI,EADJA,IAEA,OACE,yBAAKA,IAAKA,GACR,8BACE,yBAAKjI,UAAWsI,KAAMC,QACpB,kBAAC,KAAD,CAAS/I,GAAI,YAAc6I,EAAKjK,IAC9B,yBACEoK,IAAI,SACJC,IAA0B,MAArBJ,EAAK9F,OAAOmG,MAAgBL,EAAK9F,OAAOmG,MAAQC,SAI3D,6BACGN,EAAKnE,SACJ,4BACE0E,SAAUnF,EAAoBoF,MAAK,SAACzK,GAAD,OAAQA,IAAOiK,EAAKjK,MACvDyJ,QAAS,WACPM,EAASE,EAAKjK,MAHlB,YAQA,4BACEwK,SAAUnF,EAAoBoF,MAAK,SAACzK,GAAD,OAAQA,IAAOiK,EAAKjK,MACvDyJ,QAAS,WACPO,EAAOC,EAAKjK,MAHhB,YAUN,8BACE,8BACE,6BAAMiK,EAAKhK,MACX,6BAAMgK,EAAK9G,SAEb,8BACE,6BAAM,yBACN,6BAAM,0B,SCzDHuH,GAAW,SAACjK,GACvB,OAAOA,EAAM8G,UAAUtC,OAGZ0F,GAAc,SAAClK,GAC1B,OAAOA,EAAM8G,UAAUzC,UAOZ8F,GAAqB,SAACnK,GACjC,OAAOA,EAAM8G,UAAUpC,iBAGZ0F,GAAiB,SAACpK,GAC7B,OAAOA,EAAM8G,UAAU1C,aAGZiG,GAAgB,SAACrK,GAC5B,OAAOA,EAAM8G,UAAUnC,YAGZ2F,GAAyB,SAACtK,GACrC,OAAOA,EAAM8G,UAAUlC,qBAGZ2F,GAAiB,SAACvK,GAC7B,OAAOA,EAAM8G,UAAU9C,QCzBnBwG,GAA0B,SAACC,GAE/B,MADe,IAeJC,GAAuCC,IAAMC,MAAK,SAACnK,GAC9D,IAaMuD,EAAS6G,aAAYN,IAE3B,OACE,6BACE,kBAAC,KAAD,CACEO,oBAAoB,EACpBC,cAAe,CACbzG,KAAMN,EAAOM,KACbC,OAAQyG,OAAOhH,EAAOO,SAExB0G,SAAUT,GACVU,SAxBS,SACbT,EADa,GAGT,IADFU,EACC,EADDA,cAEInH,EAAqB,CACzBM,KAAMmG,EAAOnG,KACbC,OAA0B,SAAlBkG,EAAOlG,OAAoB,KAAyB,SAAlBkG,EAAOlG,QAGnD9D,EAAM2K,gBAAgBpH,GACtBmH,GAAc,MAeT,gBAAGE,EAAH,EAAGA,aAAH,OACC,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOvL,KAAK,OAAON,KAAK,SAExB,kBAAC,KAAD,CAAOA,KAAK,SAAS8L,GAAG,UACtB,4BAAQ9J,MAAM,QAAd,OACA,4BAAQA,MAAM,QAAd,iBACA,4BAAQA,MAAM,SAAd,oBAEF,4BAAQ1B,KAAK,SAASiK,SAAUsB,GAAhC,gB,SCrCCE,GAA6B,WACxC,IAAM/G,EAAQqG,aAAYZ,IACpBvF,EAAkBmG,aAAYV,IAC9B/F,EAAcyG,aAAYT,IAC1B/F,EAAWwG,aAAYX,IACvBlG,EAAS6G,aAAYN,IACrB3F,EAAsBiG,aAAYP,IAElC1G,EAAW4H,eACXC,EAAUC,eAEhBC,qBAAU,WACR,IAAMC,EAASC,SACbJ,EAAQK,SAASC,OAAOC,OAAO,IAG7BC,EAAa7H,EACb8H,EAAelI,EASnB,OAPM4H,EAAOO,OACXF,EAAaG,OAAOR,EAAOO,OAEvBP,EAAOtH,OACX4H,EAAY,2BAAQA,GAAR,IAAsB5H,KAAMsH,EAAOtH,QAGzCsH,EAAOrH,QACb,IAAK,OACH2H,EAAY,2BAAQA,GAAR,IAAsB3H,OAAQ,OAC1C,MACF,IAAK,OACH2H,EAAY,2BAAQA,GAAR,IAAsB3H,QAAQ,IAC1C,MACF,IAAK,QACH2H,EAAY,2BAAQA,GAAR,IAAsB3H,QAAQ,IAI9CX,EAASmB,EAAakH,EAAY5H,EAAU6H,MAC3C,IAEHP,qBAAU,WACR,IAAMU,EAAyB,GAEzBrI,EAAOM,OAAM+H,EAAM/H,KAAON,EAAOM,MACjB,OAAlBN,EAAOO,SAAiB8H,EAAM9H,OAASyG,OAAOhH,EAAOO,SACrC,IAAhBH,IAAmBiI,EAAMF,KAAOnB,OAAO5G,IAE3CqH,EAAQjD,KAAK,CACX8D,SAAU,SACVP,OAAQF,aAAsBQ,OAE/B,CAACrI,EAAQI,IAEZ,IAMMmF,EAAS,SAATA,EAAUlH,GACduB,EAAS2F,EAAOlH,KAEZiH,EAAW,SAAXA,EAAYjH,GAChBuB,EAAS0F,EAASjH,KAGpB,OACE,6BACE,kBAACqI,GAAD,CAAiBU,gBAZG,SAACpH,GACvBJ,EAASmB,EAAa,EAAGV,EAAUL,OAYjC,kBAAC,GAAD,CACEU,gBAAiBA,EACjBL,SAAUA,EACVD,YAAaA,EACb6D,cApBgB,SAACkB,GACrBvF,EAASmB,EAAaoE,EAAY9E,EAAUL,OAqB1C,6BACGQ,EAAMW,KAAI,SAACqE,GAAD,OACT,kBAAC,GAAD,CACEA,KAAMA,EACN5E,oBAAqBA,EACrBwE,IAAKI,EAAKjK,GACVgK,OAAQA,EACRD,SAAUA,U,qBC5FPiD,GARa,WAC1B,OACE,6BACE,yBAAK3C,IAAK4C,KAAW7C,IAAI,gBCIlB8C,GAAiC,SAAChM,GAC7C,IAAMkE,EAAakG,aAAYR,IAC/B,OACE,oCACE,4BAAK5J,EAAMiM,WACV/H,EAAa,kBAAC,GAAD,MAAgB,KAC9B,kBAAC,GAAD,Q,qBCHSgI,GARmB,WAChC,OACE,yBAAKxL,UAAWsI,KAAMmD,MACpB,mD,0CCcSC,GAbmB,SAAC,GAA6B,IAA3BnN,EAA0B,EAA1BA,QAASwD,EAAiB,EAAjBA,WAC5C,OACE,yBAAK/B,UAAWsI,KAAM5B,MACpB,yBAAK+B,IAAKE,KAAWH,IAAI,SACxBjK,EACD,6BACE,uCACCwD,K,sCCVH4J,GAAcrL,aAAiB,IA2BtBsL,gBAAiC,CAC9ChG,KAAM,sBADOgG,EArByD,SAAC,GAElE,IADLC,EACI,EADJA,aAEA,OACE,0BAAM9B,SAAU8B,GACd,6BACE,kBAACC,GAAA,EAAD,CACEnN,KAAK,WACLN,KAAK,cACL0N,UAAWtM,KACXK,YAAY,kBACZgK,SAAU,CAAC1J,KAAUuL,OAGzB,6BACE,4BAAQhN,KAAK,UAAb,iBCgBOU,iBANO,SAACR,GACrB,MAAO,CACLiD,MAAOjD,EAAM2G,YAAY1D,SAM3B,CACEkK,QAASxN,EAAQwD,sBAHN3C,EA1B6C,SAACC,GAC3D,IAAI2M,EAAgB,YAAI3M,EAAMwC,OAC3BoK,UACAlI,KAAI,SAACQ,GAAD,OACH,kBAAC,GAAD,CAAMjG,QAASiG,EAAKjG,QAAS0J,IAAKzD,EAAKpG,GAAI2D,WAAYyC,EAAKzC,gBAOhE,OACE,yBAAK/B,UAAWsI,KAAM6D,YACpB,wCACA,kBAAC,GAAD,CAAapC,SAPD,SAACT,GACfhK,EAAM0M,QAAQ1C,EAAOrH,gBAOnB,yBAAKjC,UAAWsI,KAAMxG,OAAQmK,O,qBCmBrBG,GA5CqC,SAAC9M,GAAW,IAAD,EAC7BiI,oBAAS,GADoB,oBACtD8E,EADsD,KAC5CC,EAD4C,OAEjC/E,mBAASjI,EAAMiC,QAFkB,oBAEtDA,EAFsD,KAE9CY,EAF8C,KAI7DqI,qBAAU,WACRrI,EAAU7C,EAAMiC,UACf,CAACjC,EAAMiC,SAeV,OACE,qCACI8K,GACA,6BACE,uCACA,0BAAME,cAlBW,WACvBD,GAAY,KAiBkChN,EAAMiC,QAAU,eAG3D8K,GACC,6BACE,2BACEG,WAAW,EACXC,OArBiB,WACzBH,GAAY,GACZhN,EAAMoN,aAAanL,IAoBXoL,SAjBa,SAACC,GACtBzK,EAAUyK,EAAEC,cAAcxM,QAiBlB1B,KAAK,OACL0B,MAAOkB,O,qBCpCbuL,GAAcxM,aAAiB,IAqEtByM,GAJkBnB,aAAkC,CACjEhG,KAAM,eADyBgG,EA1D7B,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,aAAchM,EAAqB,EAArBA,MAAOgC,EAAc,EAAdA,QAC1B,OACE,0BAAMkI,SAAU8B,GACd,0CAEE,kBAACC,GAAA,EAAD,CACEzN,KAAK,WACLM,KAAK,OACLmB,YAAY,YACZiM,UAAW5L,KACX2J,SAAU,CAAC1J,KAAU0M,OAGzB,yCAEE,kBAAChB,GAAA,EAAD,CACEzN,KAAK,UACLM,KAAK,OACLmB,YAAY,WACZiM,UAAW5L,KACX2J,SAAU,CAAC1J,SAGf,kDAEE,kBAAC0L,GAAA,EAAD,CAAOzN,KAAK,iBAAiBM,KAAK,WAAWoN,UAAW5L,QAE1D,uDAEE,kBAAC2L,GAAA,EAAD,CACEzN,KAAK,4BACLM,KAAK,OACLmB,YAAY,yBACZiM,UAAWtM,QAIf,yCAEGuN,OAAOC,KAAKpL,EAAQqL,UAAUlJ,KAAI,SAACiE,GAClC,OACE,yBAAKA,IAAKA,GACPA,EADH,IAEE,kBAAC6D,GAAA,EAAD,CAAOzN,KAAM,YAAc4J,EAAKtJ,KAAK,OAAOoN,UAAW5L,YAM9DN,GAAS,yBAAKG,UAAWC,KAAOkN,kBAAmBtN,GAEpD,6BACE,4BAAQlB,KAAK,UAAb,aCcFyO,GAA8C,SAAC,GAI9C,IAHLvL,EAGI,EAHJA,QACAwL,EAEI,EAFJA,QACAC,EACI,EADJA,aACI,EAUAzL,EAAQqL,SARVK,EAFE,EAEFA,SACAC,EAHE,EAGFA,QACAC,EAJE,EAIFA,GACAC,EALE,EAKFA,QACAC,EANE,EAMFA,UACAC,EAPE,EAOFA,QACAC,EARE,EAQFA,OACAC,EATE,EASFA,SAGF,OACE,6BACE,2CAAiBjM,EAAQkM,UACzB,0CAAgBlM,EAAQmM,SACxB,mDAAyBnM,EAAQoM,eAAiB,MAAQ,MACzDpM,EAAQoM,gBACP,wDAA8BpM,EAAQqM,2BAGxC,yCAEGX,EAAW,0CAAgBA,GAAkB,KAC7CC,EAAU,yCAAeA,GAAiB,KAC1CC,EAAK,oCAAUA,GAAY,KAC3BC,EAAU,yCAAeA,GAAiB,KAC1CC,EAAY,2CAAiBA,GAAmB,KAChDC,EAAU,yCAAeA,GAAiB,KAC1CC,EAAS,wCAAcA,GAAgB,KACvCC,EAAW,0CAAgBA,GAAkB,MAE/CT,GACC,6BACE,4BAAQxF,QAASyF,GAAjB,WAOKa,GA5G0B,SAAC,GAOnC,IANLtM,EAMI,EANJA,QACAN,EAKI,EALJA,OACAmL,EAII,EAJJA,aACAW,EAGI,EAHJA,QACAe,EAEI,EAFJA,UACAC,EACI,EADJA,YACI,EAC4B9G,oBAAS,GADrC,oBACG8E,EADH,KACaC,EADb,KAGJ,IAAKzK,EACH,OAAO,kBAAC,GAAD,MAiBT,OACE,6BACE,yBAAK7B,UAAWsI,KAAMgG,aACpB,6BACE,yBAAK7F,IAAK5G,EAAQU,OAAOgM,OAAS5F,KAAWH,IAAI,iBAChD6E,GACC,6BACE,8CACA,2BAAO1O,KAAK,OAAOgO,SAtBJ,SAACC,GACtBA,EAAE4B,OAAOC,OAAS7B,EAAE4B,OAAOC,MAAMjO,QACnC4N,EAAUxB,EAAE4B,OAAOC,MAAM,SAyBvB,kBAAC,GAAD,CAAwBlN,OAAQA,EAAQmL,aAAcA,IAErDL,EACC,kBAAC,GAAD,CACEzC,cAAe/H,EACfkI,SA1BO,SAACrI,GAChB2M,EAAY3M,GAAUN,MAAK,WACzBkL,GAAY,OAyBNzK,QAASA,IAGX,kBAAC,GAAD,CAAaA,QAASA,EAASwL,QAASA,EAASC,aAxBpC,kBAAMhB,GAAY,SCN1BoC,GAvBsB,SAAC,GAO/B,IANL7M,EAMI,EANJA,QACAN,EAKI,EALJA,OACAmL,EAII,EAJJA,aACAW,EAGI,EAHJA,QACAe,EAEI,EAFJA,UACAC,EACI,EADJA,YAEA,OACE,6BACE,kBAAC,GAAD,CACEhB,QAASA,EACTxL,QAASA,EACTN,OAAQA,EACRmL,aAAcA,EACd0B,UAAWA,EACXC,YAAaA,IAEf,kBAAC,GAAD,Q,UCDAM,G,mLAEF,IAAIzN,GAAyB0N,KAAKtP,MAAMuP,MAAMC,OAAO5N,OAChDA,IACHA,EAAS0N,KAAKtP,MAAMyP,mBAGlBH,KAAKtP,MAAMgL,QAAQjD,KAAK,UAIvBnG,GAGH0N,KAAKtP,MAAMkD,eAAetB,GAC1B0N,KAAKtP,MAAM0P,UAAU9N,IAHrB+N,QAAQpP,MAAM,qE,0CAQhB+O,KAAKM,mB,yCAGYC,EAAsBC,GACnCR,KAAKtP,MAAMuP,MAAMC,OAAO5N,SAAWiO,EAAUN,MAAMC,OAAO5N,QAC5D0N,KAAKM,mB,+BAKP,OACE,6BACE,kBAAC,GAAD,iBACMN,KAAKtP,MADX,CAEE+N,SAAUuB,KAAKtP,MAAMuP,MAAMC,OAAO5N,OAClCW,QAAS+M,KAAKtP,MAAMuC,QACpBN,OAAQqN,KAAKtP,MAAMiC,OACnBmL,aAAckC,KAAKtP,MAAMoN,aACzB0B,UAAWQ,KAAKtP,MAAM8O,UACtBC,YAAaO,KAAKtP,MAAM+O,oB,GAvCHgB,aAuDhBnJ,eACb7G,cAVoB,SAACR,GACrB,MAAO,CACLgD,QAAShD,EAAM2G,YAAY3D,QAC3BN,OAAQ1C,EAAM2G,YAAYjE,OAC1BwN,iBAAkBlQ,EAAMK,KAAKd,GAC7Ba,OAAQJ,EAAMK,KAAKD,UAKI,CACvBuD,iBACAwM,UzBCqB,SAAC9N,GAAD,8CAA+B,WAAOuB,GAAP,eAAAC,EAAA,sEACnCzB,EAAqBC,GADc,OAChDI,EADgD,OAEtDmB,EAASjE,EAAQ2D,UAAUb,IAF2B,2CAA/B,uDyBArBoL,azBKwB,SAACnL,GAAD,8CAA+B,WAAOkB,GAAP,SAAAC,EAAA,+EAEpCzB,EAAwBM,GAFY,OAG/B,IAH+B,OAG9CwD,YACPtC,EAASjE,EAAQ2D,UAAUZ,IAJ0B,uGAA/B,uDyBJxB6M,UzBeqB,SAACkB,GAAD,8CAA2B,WAAO7M,GAAP,eAAAC,EAAA,sEAC/BzB,EAAqBqO,GADU,OAE1B,KADlBhO,EAD4C,QAEzCyD,YACPtC,EAASjE,EAAQ8D,iBAAiBhB,EAAKA,KAAKiB,SAHI,2CAA3B,uDyBdrB8L,YzBqBuB,SAACxM,GAAD,8CAAqC,WAC9DY,EACA8M,GAF8D,iBAAA7M,EAAA,6DAIxDxB,EAASqO,IAAWrQ,KAAKd,GAJ+B,SAK3C6C,EAAuBY,GALoB,UAMtC,KADlBP,EALwD,QAMrDyD,WANqD,oBAO9C,MAAV7D,EAPwD,gBAQ1DuB,EAASD,EAAetB,IARkC,6BAUpD,IAAIsO,MAAM,wBAV0C,uCAa5D/M,EAASgN,YAAW,cAAe,CAAEC,OAAQpO,EAAKhD,SAAS,MAbC,kBAcrDqR,QAAQC,OAAOtO,EAAKhD,SAAS,KAdwB,4CAArC,2DyBnBzBuR,KACA1Q,KATa+G,CAUbyI,I,oBCnEamB,GAjB4C,SAACxQ,GAC1D,OACE,4BAAQU,UAAWwG,KAAEuJ,QACnB,wBAAI/P,UAAWwG,KAAEnI,MAAjB,kBACA,yBAAK2B,UAAWwG,KAAEwJ,YACf1Q,EAAML,OACL,6BACGK,EAAMqF,MADT,MACkB,4BAAQkD,QAASvI,EAAM2Q,QAAvB,aAGlB,kBAAC,KAAD,CAASzQ,GAAG,UAAZ,eChBJ0Q,G,2KAEF,OAAO,kBAAC,GAAWtB,KAAKtP,W,GAFEkK,IAAM6F,WAarBhQ,iBAPO,SAACR,GACrB,MAAO,CACLI,OAAQJ,EAAMK,KAAKD,OACnB0F,MAAO9F,EAAMK,KAAKyF,SAMpB,CAAEsL,OrB2DkB,yDAAiB,WAAOxN,GAAP,SAAAC,EAAA,sEACZyB,IADY,cAEtBY,aAAetE,EAAgBuE,SAC5CvC,EAASjE,EAAwB,KAAM,KAAM,MAAM,IAHhB,2CAAjB,wDqB7DPa,CAGb6Q,I,qBCZIpD,GAAcxM,aAAiB,IAqD/B6P,GAAiBvE,aAA4C,CACjEhG,KAAM,SADegG,EA7CnB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,aAAchM,EAAwB,EAAxBA,MAAO+E,EAAiB,EAAjBA,WAC1B,OACE,6BACE,0BAAMmF,SAAU8B,GACd,6BACE,kBAACC,GAAA,EAAD,CACEzN,KAAK,QACLM,KAAK,OACLmB,YAAY,QACZiM,UAAW5L,KACX2J,SAAU,CAAC1J,KAAU0M,OAGzB,6BACE,kBAAChB,GAAA,EAAD,CACEzN,KAAK,WACLM,KAAK,WACLmB,YAAY,WACZiM,UAAW5L,KACX2J,SAAU,CAAC1J,KAAU0M,OAGzB,6BACE,kBAAChB,GAAA,EAAD,CAAOzN,KAAK,aAAaM,KAAK,WAAWoN,UAAW5L,OADtD,eAICyE,GAAc,yBAAK4D,IAAI,UAAUC,IAAK7D,IACtCA,GACC,kBAACkH,GAAA,EAAD,CACEzN,KAAK,UACLM,KAAK,OACLmB,YAAY,mBACZiM,UAAW5L,KACX2J,SAAU,CAAC1J,QAGdP,GAAS,yBAAKG,UAAWC,KAAOkN,kBAAmBtN,GACpD,6BACE,4BAAQlB,KAAK,UAAb,eAkBGyR,GAAsB,WACjC,IAAMxL,EAAa8E,cAAY,SAAC7K,GAAD,OAAyBA,EAAMK,KAAK0F,cAC7D3F,EAASyK,cAAY,SAAC7K,GAAD,OAAyBA,EAAMK,KAAKD,UACzDwD,EAAW4H,eAOjB,OAAIpL,EACK,kBAAC,KAAD,CAAUO,GAAG,aAIpB,yBAAKQ,UAAU,IACb,qCACA,kBAACmQ,GAAD,CAAgBpG,SAZH,SAACrI,GAA6B,IACrC0C,EAAwC1C,EAAxC0C,MAAOC,EAAiC3C,EAAjC2C,SAAUC,EAAuB5C,EAAvB4C,UAAWC,EAAY7C,EAAZ6C,QACpC9B,EtB3BiB,SACnB2B,EACAC,EACAC,EACAC,GAJmB,8CAKL,WAAO9B,GAAP,iBAAAC,EAAA,sEACUyB,EAAcC,EAAOC,EAAUC,EAAWC,GADpD,QACR8L,EADQ,QAEAtL,aAAetE,EAAgBuE,QAE3CvC,EAASoC,MAELwL,EAAUtL,aAAerE,EAAsB4P,mBACjD7N,EAASwC,KAEL1G,EACJ8R,EAAU/R,SAASkC,OAAS,EAAI6P,EAAU/R,SAAS,GAAK,eAC1DmE,EAASgN,YAAW,QAAS,CAAEC,OAAQnR,MAX3B,2CALK,sDsB2BRoG,CAAMP,EAAOC,EAAUC,EAAWC,KAULK,WAAYA,IAChD,yFACA,wDACA,+C,qBCvFS2L,GAJY,WACzB,OAAO,wBAAIvQ,UAAWsI,KAAMkI,UAArB,uBCcT,IChBkCpR,GDgB5BqR,GAAmBC,gBAAK,kBAAM,iCAC9BC,ICjB4BvR,GDiBIqR,GChB7B,SAACnR,GACN,OACE,kBAAC,IAAMsR,SAAP,CAAgBC,SAAU,4CACxB,kBAACzR,GAAqBE,MDoBxBwR,G,sLAEFlC,KAAKtP,MAAMyR,kB,+BAIX,OAAKnC,KAAKtP,MAAM8F,YAKd,yBAAKpF,UAAU,eACb,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,yBAAKA,UAAU,uBACb,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOgR,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,KAAD,CAAU1R,GAAG,gBACjD,kBAAC,KAAD,CAAOyR,KAAK,oBAAoBC,OAAQ,kBAAM,kBAAC,GAAD,SAC9C,kBAAC,KAAD,CAAOD,KAAK,WAAWC,OAAQ,kBAAM,kBAACP,GAAD,SACrC,kBAAC,KAAD,CAAOM,KAAK,SAASC,OAAQ,kBAAM,kBAAC,GAAD,CAAW3F,UAAW,aACzD,kBAAC,KAAD,CAAO0F,KAAK,YAAYC,OAAQ,kBAAM,kBAAC,GAAD,SACtC,kBAAC,KAAD,CAAOD,KAAK,SAASC,OAAQ,kBAAM,kBAAC,GAAD,SACnC,kBAAC,KAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,GAAD,YAf7B,kBAAC,GAAD,U,GAPK7B,aAkCHnJ,eACb7G,cALsB,SAACR,GAAD,MAA0B,CAChDuG,YAAavG,EAAMiH,IAAIV,eAIE,CAAE2L,cvBnCA,WAC3B,OAAO,SAACtO,GACUA,EAASoC,KACjBzD,MAAK,WACXqB,EAASjE,YuBgCbqR,KAFa3J,CAGb4K,IEvDFK,IAASD,OACP,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAU/K,MAAOA,IACf,kBAAC,GAAD,QAGJiL,SAASC,eAAe,U,mBCd1BrT,EAAOC,QAAU,IAA0B,kC,mBCC3CD,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,+B,mBCA3ED,EAAOC,QAAU,CAAC,WAAa,+BAA+B,WAAa,+BAA+B,aAAe,mC,mBCAzHD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,KAAO,qBAAqB,WAAa,8B","file":"static/js/main.3861d832.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1JV0J\",\"posts\":\"MyPosts_posts__WxTG3\"};","import { InferActionsTypes } from './redux-store';\r\n\r\ntype DialogType = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\ntype MessageType = {\r\n  id: number;\r\n  message: string;\r\n};\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 10, name: 'Jeniy' },\r\n    { id: 11, name: 'Dimych' },\r\n    { id: 12, name: 'Sveta' },\r\n    { id: 13, name: 'Sasha' },\r\n    { id: 14, name: 'Vika' },\r\n  ] as Array<DialogType>,\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How is your day' },\r\n    { id: 3, message: 'Yo' },\r\n    { id: 4, message: 'Yo' },\r\n    { id: 5, message: 'Yo' },\r\n  ] as Array<MessageType>,\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SEND_MESSAGE': {\r\n      let body = action.newMessageBody;\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 6, message: body }],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  sendMessage: (newMessageBody: string) =>\r\n    ({\r\n      type: 'SEND_MESSAGE',\r\n      newMessageBody,\r\n    } as const),\r\n};\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\r\n  ({\r\n    isAuth: state.auth.isAuth,\r\n  } as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean;\r\n};\r\ntype DispatchPropsType = {};\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let { isAuth, ...restProps } = props;\r\n\r\n    if (!isAuth) return <Redirect to=\"/login\" />;\r\n\r\n    return <WrappedComponent {...(restProps as WCP)} />;\r\n  };\r\n\r\n  let ConnectedAuthRedirectComponent = connect<\r\n    MapPropsType,\r\n    DispatchPropsType,\r\n    WCP,\r\n    AppStateType\r\n  >(\r\n    mapStateToPropsForRedirect,\r\n    {},\r\n  )(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"User_avatar__ttca8\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.2ca02761.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"News_main__zoEFG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__nskEi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__1Pyx5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formSummaryError\":\"ProfileDataFormReduxForm_formSummaryError__2j6hX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formSummaryError\":\"Login_formSummaryError__1z14I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notfound\":\"NotFound_notfound__36K1O\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css';\r\n\r\ntype PropsTypes = {\r\n  input: string;\r\n  meta: { touched: boolean; error: string };\r\n  type: string;\r\n  placeholder: string;\r\n};\r\n\r\nexport const Textarea: React.FC<PropsTypes> = ({\r\n  input,\r\n  meta: { touched, error },\r\n  type,\r\n  placeholder,\r\n}) => {\r\n  const hasError = touched && error;\r\n\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n      <textarea {...input} type={type} placeholder={placeholder} />\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<PropsTypes> = ({\r\n  input,\r\n  meta: { touched, error },\r\n  type,\r\n  placeholder,\r\n}) => {\r\n  const hasError = touched && error;\r\n\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n      <input {...input} type={type} placeholder={placeholder} />\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (value) {\r\n    return undefined;\r\n  }\r\n\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n  if (value && value.length > maxLength) {\r\n    return `Max length is ${maxLength} symbols`;\r\n  }\r\n\r\n  return undefined;\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__27UmN\",\"item\":\"Navbar_item__3k8Ku\",\"active\":\"Navbar_active__1UVo4\"};","import axios from 'axios';\r\nimport { UserType } from '../types/types';\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': 'a581eddc-6b2a-4437-9b2a-cfc6d6cb8bb3',\r\n  },\r\n});\r\n\r\nexport type APIResponseType<D = {}, RC = resultCodesEnum> = {\r\n  data: D;\r\n  messages: string[];\r\n  resultCode: RC;\r\n};\r\n\r\nexport enum resultCodesEnum {\r\n  Success = 0,\r\n  Error = 1,\r\n}\r\n\r\nexport enum resultCodesForCaptcha {\r\n  CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n  items: UserType[];\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n","import { instance, APIResponseType } from './api';\r\nimport { PhotosType, ProfileType } from '../types/types';\r\n\r\ntype SavePhotoResponseDataType = {\r\n  photos: PhotosType;\r\n};\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: number) {\r\n    return instance.get<ProfileType>(`profile/${userId}`).then((res) => res.data);\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance.get<string>(`profile/status/${userId}`).then((res) => res.data);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance\r\n      .put<APIResponseType>(`profile/status`, { status: status })\r\n      .then((res) => res.data);\r\n  },\r\n  savePhoto(photoFile: File) {\r\n    let formData = new FormData();\r\n    formData.append('image', photoFile);\r\n    return instance\r\n      .put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      })\r\n      .then((res) => res.data);\r\n  },\r\n  saveProfile(profile: ProfileType) {\r\n    return instance.put<APIResponseType>(`profile`, profile).then((res) => res.data);\r\n  },\r\n};\r\n","import { profileAPI } from '../api/profile-api';\r\nimport { stopSubmit, FormAction } from 'redux-form';\r\nimport { PostType, ProfileType, PhotosType } from '../types/types';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nconst initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Hi, how are you?', likesCount: 5 },\r\n    { id: 2, message: \"I'ts my first post\", likesCount: 3 },\r\n    { id: 3, message: 'Yo', likesCount: 101 },\r\n  ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case 'ADD_POST': {\r\n      const newPost = {\r\n        id: 4,\r\n        message: action.newPostText,\r\n        likesCount: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n      };\r\n    }\r\n    case 'SET_USER_PROFILE': {\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    }\r\n    case 'SET_STATUS': {\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    }\r\n    case 'DELETE_POST': {\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((p) => p.id !== action.postId),\r\n      };\r\n    }\r\n    case 'SAVE_PHOTO_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostText: string) =>\r\n    ({\r\n      type: 'ADD_POST',\r\n      newPostText,\r\n    } as const),\r\n  setUserProfile: (profile: ProfileType) =>\r\n    ({\r\n      type: 'SET_USER_PROFILE',\r\n      profile,\r\n    } as const),\r\n  setStatus: (status: string) =>\r\n    ({\r\n      type: 'SET_STATUS',\r\n      status,\r\n    } as const),\r\n  deletePost: (postId: number) =>\r\n    ({\r\n      type: 'DELETE_POST',\r\n      postId,\r\n    } as const),\r\n  savePhotoSuccess: (photos: PhotosType) =>\r\n    ({\r\n      type: 'SAVE_PHOTO_SUCCESS',\r\n      photos,\r\n    } as const),\r\n};\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getProfile(userId);\r\n  dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getStatus(userId);\r\n  dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n      dispatch(actions.setStatus(status));\r\n    }\r\n  } catch (error) {\r\n    //error handling\r\n  }\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.savePhoto(file);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.savePhotoSuccess(data.data.photos));\r\n  }\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (\r\n  dispatch,\r\n  getState,\r\n) => {\r\n  const userId = getState().auth.id;\r\n  const data = await profileAPI.saveProfile(profile);\r\n  if (data.resultCode === 0) {\r\n    if (userId != null) {\r\n      dispatch(getUserProfile(userId));\r\n    } else {\r\n      throw new Error(\"userId can't be null\");\r\n    }\r\n  } else {\r\n    dispatch(stopSubmit('editProfile', { _error: data.messages[0] }));\r\n    return Promise.reject(data.messages[0]);\r\n  }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;\r\n","const initialState = {};\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any): initialStateType => {\r\n  return state;\r\n};\r\n\r\nexport default sidebarReducer;\r\n","import { GetItemsType, instance, APIResponseType } from './api';\r\n\r\nexport const usersAPI = {\r\n  getUsers(\r\n    currentPage = 1,\r\n    pageSize = 10,\r\n    term: string = '',\r\n    friend: null | boolean = null,\r\n  ) {\r\n    return instance\r\n      .get<GetItemsType>(\r\n        `users?page=${currentPage}&count=${pageSize}&term=${term}` +\r\n          (friend === null ? '' : `&friend=${friend}`),\r\n      )\r\n      .then((res) => res.data);\r\n  },\r\n  follow(userId: number) {\r\n    return instance.post<APIResponseType>(`follow/${userId}`).then((res) => res.data);\r\n  },\r\n  unfollow(userId: number) {\r\n    return instance.delete(`follow/${userId}`).then((res) => res.data) as Promise<\r\n      APIResponseType\r\n    >;\r\n  },\r\n};\r\n","import { usersAPI } from '../api/users-api';\r\nimport { UserType } from '../types/types';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nconst initialState = {\r\n  users: [] as UserType[],\r\n  pageSize: 10,\r\n  portionSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: [] as number[], //Array of users id\r\n  filter: {\r\n    term: '',\r\n    friend: null as null | boolean,\r\n  },\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: true };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n    case 'UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: false };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n    case 'SET_USERS':\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      };\r\n    case 'SET_CURRENT_PAGE':\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case 'SET_TOTAL_USERS_COUNT':\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.count,\r\n      };\r\n    case 'TOGGLE_IS_FETCHING':\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS':\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter((id) => id !== action.userId),\r\n      };\r\n    case 'SN/USERS/SET_FILTER': {\r\n      return { ...state, filter: action.payload };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  followSuccess: (userId: number) =>\r\n    ({\r\n      type: 'FOLLOW',\r\n      userId,\r\n    } as const),\r\n\r\n  unfollowSuccess: (userId: number) =>\r\n    ({\r\n      type: 'UNFOLLOW',\r\n      userId,\r\n    } as const),\r\n\r\n  setUsers: (users: UserType[]) => ({ type: 'SET_USERS', users } as const),\r\n\r\n  setCurrentPage: (currentPage: number) =>\r\n    ({\r\n      type: 'SET_CURRENT_PAGE',\r\n      currentPage,\r\n    } as const),\r\n\r\n  setTotalUsersCount: (totalUsersCount: number) =>\r\n    ({\r\n      type: 'SET_TOTAL_USERS_COUNT',\r\n      count: totalUsersCount,\r\n    } as const),\r\n\r\n  toggleIsFetching: (isFetching: boolean) =>\r\n    ({\r\n      type: 'TOGGLE_IS_FETCHING',\r\n      isFetching,\r\n    } as const),\r\n\r\n  toggleFollowingProgress: (isFetching: boolean, userId: number) =>\r\n    ({\r\n      type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\r\n      isFetching,\r\n      userId,\r\n    } as const),\r\n  setFilter: (filter: FilterType) =>\r\n    ({ type: 'SN/USERS/SET_FILTER', payload: filter } as const),\r\n};\r\n\r\nexport const requestUsers = (\r\n  currentPage: number,\r\n  pageSize: number,\r\n  filter: FilterType,\r\n): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleIsFetching(true));\r\n  dispatch(actions.setCurrentPage(currentPage));\r\n  dispatch(actions.setFilter(filter));\r\n\r\n  const data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n  dispatch(actions.toggleIsFetching(false));\r\n  dispatch(actions.setUsers(data.items));\r\n  dispatch(actions.setTotalUsersCount(data.totalCount));\r\n};\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleFollowingProgress(true, userId));\r\n  const data = await usersAPI.follow(userId);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.followSuccess(userId));\r\n  }\r\n  dispatch(actions.toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleFollowingProgress(true, userId));\r\n  const data = await usersAPI.unfollow(userId);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.unfollowSuccess(userId));\r\n  }\r\n  dispatch(actions.toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n","import { instance, APIResponseType, resultCodesEnum, resultCodesForCaptcha } from './api';\r\n\r\ntype MeResponseDataType = {\r\n  id: number;\r\n  email: string;\r\n  login: string;\r\n};\r\n\r\ntype LoginResponseDataType = {\r\n  userId: number;\r\n};\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance\r\n      .get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n      .then((res) => res.data);\r\n  },\r\n  login(\r\n    email: string,\r\n    password: string,\r\n    remeberMe = false,\r\n    captcha: null | string = null,\r\n  ) {\r\n    return instance\r\n      .post<\r\n        APIResponseType<LoginResponseDataType, resultCodesEnum | resultCodesForCaptcha>\r\n      >(`auth/login`, {\r\n        email,\r\n        password,\r\n        remeberMe,\r\n        captcha,\r\n      })\r\n      .then((res) => res.data);\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`).then((res) => res.data);\r\n  },\r\n};\r\n","import { instance } from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string;\r\n};\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instance\r\n      .get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n      .then((res) => res.data);\r\n  },\r\n};\r\n","import { FormAction, stopSubmit } from 'redux-form';\r\nimport { resultCodesEnum, resultCodesForCaptcha } from '../api/api';\r\nimport { authAPI } from '../api/auth-api';\r\nimport { securityAPI } from '../api/security-api';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nconst initialState = {\r\n  id: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SET_USER_DATA':\r\n    case 'SET_CAPTCHA_URL_SUCCESS':\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setAuthUserData: (\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n  ) =>\r\n    ({\r\n      type: 'SET_USER_DATA',\r\n      payload: { id, email, login, isAuth },\r\n    } as const),\r\n  getCaptchaUrlSuccess: (captchaUrl: string) =>\r\n    ({\r\n      type: 'SET_CAPTCHA_URL_SUCCESS',\r\n      payload: { captchaUrl },\r\n    } as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n  const meData = await authAPI.me();\r\n\r\n  if (meData.resultCode === resultCodesEnum.Success) {\r\n    const { id, login, email } = meData.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true));\r\n  }\r\n};\r\n\r\nexport const login = (\r\n  email: string,\r\n  password: string,\r\n  remeberMe: boolean,\r\n  captcha: string,\r\n): ThunkType => async (dispatch) => {\r\n  const loginData = await authAPI.login(email, password, remeberMe, captcha);\r\n  if (loginData.resultCode === resultCodesEnum.Success) {\r\n    //success, get auth data\r\n    dispatch(getAuthUserData());\r\n  } else {\r\n    if (loginData.resultCode === resultCodesForCaptcha.CaptchaIsRequired) {\r\n      dispatch(getCaptchaUrl());\r\n    }\r\n    const message =\r\n      loginData.messages.length > 0 ? loginData.messages[0] : 'Common error';\r\n    dispatch(stopSubmit('login', { _error: message }));\r\n  }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const data = await securityAPI.getCaptchaUrl();\r\n  const captchaUrl = data.url;\r\n  dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  const logoutData = await authAPI.logout();\r\n  if (logoutData.resultCode === resultCodesEnum.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false));\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;\r\n","import { getAuthUserData } from './auth-reducer';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nconst initialState = {\r\n  initialized: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case 'INITIALIZED_SUCCESS':\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  initializedSuccess: () =>\r\n    ({\r\n      type: 'INITIALIZED_SUCCESS',\r\n    } as const),\r\n};\r\n\r\nexport const initializeApp = () => {\r\n  return (dispatch: any) => {\r\n    const promise = dispatch(getAuthUserData());\r\n    promise.then(() => {\r\n      dispatch(actions.initializedSuccess());\r\n    });\r\n  };\r\n};\r\n\r\nexport default appReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n","import { createStore, combineReducers, applyMiddleware, compose, Action } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport appReducer from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>; //Global State\r\n\r\nexport type InferActionsTypes<T> = T extends {\r\n  [keys: string]: (...args: any[]) => infer U;\r\n}\r\n  ? U\r\n  : never;\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<\r\n  R,\r\n  AppStateType,\r\n  unknown,\r\n  A\r\n>;\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware)),\r\n);\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Navbar.module.css';\r\n\r\nconst Navbar: React.FC = () => {\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/profile\" activeClassName={s.active}>\r\n          Profile\r\n        </NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/dialogs\" activeClassName={s.active}>\r\n          Messages\r\n        </NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/users\" activeClassName={s.active}>\r\n          Users\r\n        </NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/settings\" activeClassName={s.active}>\r\n          News\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState } from 'react';\r\nimport styles from './Pagination.module.css';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n  totalUsersCount: number;\r\n  pageSize: number;\r\n  currentPage?: number;\r\n  onPageChanged: (pageNumber: number) => void;\r\n  portionSize?: number;\r\n};\r\n\r\nconst Pagination: React.FC<PropsType> = ({\r\n  totalUsersCount,\r\n  pageSize,\r\n  currentPage = 1,\r\n  onPageChanged = (x) => x,\r\n  portionSize = 10,\r\n}) => {\r\n  let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n\r\n  let pages: number[] = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  let portionCount = Math.ceil(pagesCount / portionSize);\r\n  let [portionNumber, setPortionNumber] = useState(1);\r\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  return (\r\n    <div className={styles.pagination}>\r\n      {portionNumber > 1 && (\r\n        <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>\r\n      )}\r\n      {pages\r\n        .filter((p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n        .map((p) => {\r\n          return (\r\n            <span\r\n              className={cn(\r\n                {\r\n                  [styles.selectedPage]: currentPage === p,\r\n                },\r\n                styles.pageNumber,\r\n              )}\r\n              key={p}\r\n              onClick={() => {\r\n                onPageChanged(p);\r\n              }}>\r\n              {p}\r\n            </span>\r\n          );\r\n        })}\r\n      {portionCount > portionNumber && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n          }}>\r\n          NEXT\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport style from './User.module.css';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n  key: number;\r\n  user: UserType;\r\n  followingInProgress: number[];\r\n  unfollow: (userId: number) => void;\r\n  follow: (userId: number) => void;\r\n};\r\n\r\nconst User: React.FC<PropsType> = ({\r\n  followingInProgress,\r\n  unfollow,\r\n  follow,\r\n  user,\r\n  key,\r\n}) => {\r\n  return (\r\n    <div key={key}>\r\n      <span>\r\n        <div className={style.avatar}>\r\n          <NavLink to={'/profile/' + user.id}>\r\n            <img\r\n              alt=\"Avatar\"\r\n              src={user.photos.small != null ? user.photos.small : userPhoto}\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}>\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}>\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </span>\r\n      <span>\r\n        <span>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </span>\r\n        <span>\r\n          <div>{'user.location.country'}</div>\r\n          <div>{'user.location.city'}</div>\r\n        </span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import { AppStateType } from './redux-store';\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n  return state.usersPage.users;\r\n};\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getPortionSize = (state: AppStateType) => {\r\n  return state.usersPage.portionSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n  return state.usersPage.filter;\r\n};\r\n","import { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { getUsersFilter } from '../../redux/users-selectors';\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n  const errors = {};\r\n  return errors;\r\n};\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\n\r\ntype FormType = {\r\n  term: string;\r\n  friend: FriendFormType;\r\n};\r\n\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void;\r\n};\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n  const submit = (\r\n    values: FormType,\r\n    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void },\r\n  ) => {\r\n    const filter: FilterType = {\r\n      term: values.term,\r\n      friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false,\r\n    };\r\n\r\n    props.onFilterChanged(filter);\r\n    setSubmitting(false);\r\n  };\r\n\r\n  const filter = useSelector(getUsersFilter);\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={{\r\n          term: filter.term,\r\n          friend: String(filter.friend) as FriendFormType,\r\n        }}\r\n        validate={usersSearchFormValidate}\r\n        onSubmit={submit}>\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Field type=\"text\" name=\"term\" />\r\n\r\n            <Field name=\"friend\" as=\"select\">\r\n              <option value=\"null\">All</option>\r\n              <option value=\"true\">Only followed</option>\r\n              <option value=\"false\">Only unfollowed</option>\r\n            </Field>\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Find\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport User from './User/User';\r\nimport { FilterType, requestUsers } from '../../redux/users-reducer';\r\nimport { UsersSearchForm } from './UsersSearchForm';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getPageSize,\r\n  getTotalUsersCount,\r\n  getUsers,\r\n  getUsersFilter,\r\n} from '../../redux/users-selectors';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as queryString from 'querystring';\r\n\r\ntype PropsType = {};\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\n\r\nexport const Users: React.FC<PropsType> = () => {\r\n  const users = useSelector(getUsers);\r\n  const totalUsersCount = useSelector(getTotalUsersCount);\r\n  const currentPage = useSelector(getCurrentPage);\r\n  const pageSize = useSelector(getPageSize);\r\n  const filter = useSelector(getUsersFilter);\r\n  const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(\r\n      history.location.search.substr(1),\r\n    ) as QueryParamsType;\r\n\r\n    let actualPage = currentPage;\r\n    let actualFilter = filter;\r\n\r\n    if (!!parsed.page) {\r\n      actualPage = Number(parsed.page);\r\n    }\r\n    if (!!parsed.term) {\r\n      actualFilter = { ...actualFilter, term: parsed.term as string };\r\n    }\r\n\r\n    switch (parsed.friend) {\r\n      case 'null':\r\n        actualFilter = { ...actualFilter, friend: null };\r\n        break;\r\n      case 'true':\r\n        actualFilter = { ...actualFilter, friend: true };\r\n        break;\r\n      case 'false':\r\n        actualFilter = { ...actualFilter, friend: false };\r\n        break;\r\n    }\r\n\r\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const query: QueryParamsType = {};\r\n\r\n    if (!!filter.term) query.term = filter.term;\r\n    if (filter.friend !== null) query.friend = String(filter.friend);\r\n    if (currentPage !== 1) query.page = String(currentPage);\r\n\r\n    history.push({\r\n      pathname: '/users',\r\n      search: queryString.stringify(query),\r\n    });\r\n  }, [filter, currentPage]);\r\n\r\n  const onPageChanged = (pageNumber: number) => {\r\n    dispatch(requestUsers(pageNumber, pageSize, filter));\r\n  };\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(requestUsers(1, pageSize, filter));\r\n  };\r\n  const follow = (userId: number) => {\r\n    dispatch(follow(userId));\r\n  };\r\n  const unfollow = (userId: number) => {\r\n    dispatch(unfollow(userId));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n      <Pagination\r\n        totalUsersCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n        currentPage={currentPage}\r\n        onPageChanged={onPageChanged}\r\n      />\r\n      <div>\r\n        {users.map((user) => (\r\n          <User\r\n            user={user}\r\n            followingInProgress={followingInProgress}\r\n            key={user.id}\r\n            follow={follow}\r\n            unfollow={unfollow}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\nconst Preloader: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <img src={preloader} alt=\"preloader\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Users } from './Users';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { getIsFetching } from '../../redux/users-selectors';\r\n\r\ntype PropsType = {\r\n  pageTitle: string;\r\n};\r\n\r\nexport const UsersPage: React.FC<PropsType> = (props) => {\r\n  const isFetching = useSelector(getIsFetching);\r\n  return (\r\n    <>\r\n      <h2>{props.pageTitle}</h2>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport style from './News.module.css';\r\n\r\ntype PropsType = {};\r\n\r\nconst News: React.FC<PropsType> = () => {\r\n  return (\r\n    <div className={style.main}>\r\n      <p>There will be news</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default News;\r\n","import React from 'react';\r\nimport style from './Post.module.css';\r\nimport userPhoto from '../../../../assets/images/user.png';\r\n\r\ntype PropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n};\r\n\r\nconst Post: React.FC<PropsType> = ({ message, likesCount }) => {\r\n  return (\r\n    <div className={style.item}>\r\n      <img src={userPhoto} alt=\"user\"></img>\r\n      {message}\r\n      <div>\r\n        <span>like </span>\r\n        {likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport { required, maxLengthCreator } from '../../../utilities/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength15 = maxLengthCreator(15);\r\n\r\nexport type AddPostFormValuesType = {\r\n  newPostText: string;\r\n};\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType>> = ({\r\n  handleSubmit,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field\r\n          type=\"textarea\"\r\n          name=\"newPostText\"\r\n          component={Textarea}\r\n          placeholder=\"Enter your text\"\r\n          validate={[required, maxLength15]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<AddPostFormValuesType>({\r\n  form: 'profileAddPostForm',\r\n})(AddPostForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport style from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport AddPostForm from './AddPostForm';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../types/types';\r\nimport { AddPostFormValuesType } from './AddPostForm';\r\n\r\nexport type MapPropsType = {\r\n  posts: Array<PostType>;\r\n};\r\nexport type DispatchPropsType = {\r\n  addPost: (newPostText: string) => void;\r\n};\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n  let postsElements = [...props.posts]\r\n    .reverse()\r\n    .map((post) => (\r\n      <Post message={post.message} key={post.id} likesCount={post.likesCount} />\r\n    ));\r\n\r\n  let onAddPost = (values: AddPostFormValuesType) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={style.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostForm onSubmit={onAddPost} />\r\n      <div className={style.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n  mapStateToProps,\r\n  {\r\n    addPost: actions.addPostActionCreator,\r\n  },\r\n)(MyPosts);\r\n","import React, { useState, useEffect, ChangeEvent } from 'react';\r\n\r\ntype PropsType = {\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!editMode && (\r\n        <div>\r\n          <b>Status: </b>\r\n          <span onDoubleClick={activateEditMode}>{props.status || 'not status'}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            onChange={onStatusChange}\r\n            type=\"text\"\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport styles from './ProfileDataFormReduxForm.module.css';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../../utilities/validators/validators';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\ntype PropsType = {\r\n  profile: ProfileType;\r\n};\r\n\r\nconst ProfileDataForm: React.FC<\r\n  InjectedFormProps<ProfileType, PropsType> & PropsType\r\n> = ({ handleSubmit, error, profile }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        Full name:\r\n        <Field\r\n          name=\"fullName\"\r\n          type=\"text\"\r\n          placeholder=\"Full name\"\r\n          component={Input}\r\n          validate={[required, maxLength30]}\r\n        />\r\n      </div>\r\n      <div>\r\n        About me:\r\n        <Field\r\n          name=\"aboutMe\"\r\n          type=\"text\"\r\n          placeholder=\"About me\"\r\n          component={Input}\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        Looking for a job:\r\n        <Field name=\"lookingForAJob\" type=\"checkbox\" component={Input} />\r\n      </div>\r\n      <div>\r\n        My professional skills:\r\n        <Field\r\n          name=\"lookingForAJobDescription\"\r\n          type=\"text\"\r\n          placeholder=\"My professional skills\"\r\n          component={Textarea}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        Contacts:\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key}>\r\n              {key}:\r\n              <Field name={'contacts.' + key} type=\"text\" component={Input} />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n\r\n      <div>\r\n        <button type=\"submit\">Save</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({\r\n  form: 'editProfile',\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from '../ProfileStatus/ProfileStatusWithHooks';\r\nimport ProfileDataFormReduxForm from '../ProfileDataForm/ProfileDataFormReduxForm';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainFotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  const goToEditMode = () => setEditMode(true);\r\n\r\n  return (\r\n    <div>\r\n      <div className={style.description}>\r\n        <div>\r\n          <img src={profile.photos.large || userPhoto} alt=\"Large avatar\" />\r\n          {isOwner && (\r\n            <div>\r\n              <b>Change Avatar: </b>\r\n              <input type=\"file\" onChange={onMainFotoSelected} />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n\r\n        {editMode ? (\r\n          <ProfileDataFormReduxForm\r\n            initialValues={profile}\r\n            onSubmit={onSubmit}\r\n            profile={profile}\r\n          />\r\n        ) : (\r\n          <ProfileData profile={profile} isOwner={isOwner} goToEditMode={goToEditMode} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType;\r\n  isOwner: boolean;\r\n  goToEditMode: () => void;\r\n};\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({\r\n  profile,\r\n  isOwner,\r\n  goToEditMode,\r\n}) => {\r\n  const {\r\n    facebook,\r\n    website,\r\n    vk,\r\n    twitter,\r\n    instagram,\r\n    youtube,\r\n    github,\r\n    mainLink,\r\n  } = profile.contacts;\r\n\r\n  return (\r\n    <div>\r\n      <div>Full name: {profile.fullName}</div>\r\n      <div>About me: {profile.aboutMe}</div>\r\n      <div>Looking for a job: {profile.lookingForAJob ? 'Yes' : 'No'}</div>\r\n      {profile.lookingForAJob && (\r\n        <div>My professional skills: {profile.lookingForAJobDescription}</div>\r\n      )}\r\n\r\n      <div>\r\n        Contacts:\r\n        {facebook ? <div>Facebook: {facebook}</div> : null}\r\n        {website ? <div>Website: {website}</div> : null}\r\n        {vk ? <div>VK: {vk}</div> : null}\r\n        {twitter ? <div>Twitter: {twitter}</div> : null}\r\n        {instagram ? <div>Instagram: {instagram}</div> : null}\r\n        {youtube ? <div>Youtube: {youtube}</div> : null}\r\n        {github ? <div>Github: {github}</div> : null}\r\n        {mainLink ? <div>MainLink: {mainLink}</div> : null}\r\n      </div>\r\n      {isOwner && (\r\n        <div>\r\n          <button onClick={goToEditMode}>Edit</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport { ProfileType } from '../../types/types';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\nconst Profile: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={isOwner}\r\n        profile={profile}\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n        savePhoto={savePhoto}\r\n        saveProfile={saveProfile}\r\n      />\r\n      <MyPosts />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { Component } from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n} from '../../redux/profile-reducer';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { ProfileType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number) => void;\r\n  getStatus: (userId: number) => void;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends Component<PropsType> {\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        // todo: may be replace push with Redirect??\r\n        this.props.history.push('/login');\r\n      }\r\n    }\r\n\r\n    if (!userId) {\r\n      console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n    } else {\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Profile\r\n          {...this.props}\r\n          isOwner={!this.props.match.params.userId}\r\n          profile={this.props.profile}\r\n          status={this.props.status}\r\n          updateStatus={this.props.updateStatus}\r\n          savePhoto={this.props.savePhoto}\r\n          saveProfile={this.props.saveProfile}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect,\r\n)(ProfileContainer);\r\n","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport type MapPropsType = {\r\n  isAuth: boolean;\r\n  login: string | null;\r\n};\r\nexport type DispatchPropsType = {\r\n  logout: () => void;\r\n};\r\n\r\nconst Header: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n  return (\r\n    <header className={s.header}>\r\n      <h3 className={s.name}>Social Network</h3>\r\n      <div className={s.loginBlock}>\r\n        {props.isAuth ? (\r\n          <div>\r\n            {props.login} - <button onClick={props.logout}>Log out </button>\r\n          </div>\r\n        ) : (\r\n          <NavLink to=\"/login\">Sign in </NavLink>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport Header, { DispatchPropsType, MapPropsType } from './Header';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../../redux/auth-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nclass HeaderContainer extends React.Component<MapPropsType & DispatchPropsType> {\r\n  render() {\r\n    return <Header {...this.props} />;\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n  };\r\n};\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n  mapStateToProps,\r\n  { logout },\r\n)(HeaderContainer);\r\n","import React from 'react';\r\nimport styles from './Login.module.css';\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../utilities/validators/validators';\r\nimport { Input } from '../common/FormsControls/FormsControls';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\ntype LoginFormOwnProps = {\r\n  captchaUrl: string | null;\r\n};\r\n\r\nconst LoginForm: React.FC<\r\n  InjectedFormProps<LoginFormType, LoginFormOwnProps> & LoginFormOwnProps\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <Field\r\n            name=\"email\"\r\n            type=\"text\"\r\n            placeholder=\"Email\"\r\n            component={Input}\r\n            validate={[required, maxLength30]}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Field\r\n            name=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            component={Input}\r\n            validate={[required, maxLength30]}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Field name=\"rememberMe\" type=\"checkbox\" component={Input} />\r\n          remember me\r\n        </div>\r\n        {captchaUrl && <img alt=\"captcha\" src={captchaUrl} />}\r\n        {captchaUrl && (\r\n          <Field\r\n            name=\"captcha\"\r\n            type=\"text\"\r\n            placeholder=\"Enter characters\"\r\n            component={Input}\r\n            validate={[required]}\r\n          />\r\n        )}\r\n        {error && <div className={styles.formSummaryError}>{error}</div>}\r\n        <div>\r\n          <button type=\"submit\">Login</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormType, LoginFormOwnProps>({\r\n  form: 'login',\r\n})(LoginForm);\r\n\r\ntype LoginFormType = {\r\n  captcha: string;\r\n  remeberMe: boolean;\r\n  password: string;\r\n  email: string;\r\n};\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl);\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (formData: LoginFormType) => {\r\n    const { email, password, remeberMe, captcha } = formData;\r\n    dispatch(login(email, password, remeberMe, captcha));\r\n  };\r\n\r\n  if (isAuth) {\r\n    return <Redirect to=\"/profile\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n      <p>If you don't have an account, use test login and password.</p>\r\n      <p>Login: free@samuraijs.com</p>\r\n      <p>Password: free</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport style from './NotFound.module.css';\r\n\r\nconst NotFound: React.FC = () => {\r\n  return <h2 className={style.notfound}>404 Page not found</h2>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { Component, lazy } from 'react';\r\nimport { compose } from 'redux';\r\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport { UsersPage } from './components/Users/UsersPage';\r\nimport News from './components/News/News';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport { LoginPage } from './components/Login/LoginPage';\r\nimport { initializeApp } from './redux/app-reducer';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport NotFound from './components/NotFound/NotFound';\r\nimport { AppStateType } from './redux/redux-store';\r\nimport { withSuspense } from './hoc/withSuspense';\r\n\r\nconst DialogsContainer = lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst SuspendedDialogs = withSuspense(DialogsContainer);\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void;\r\n};\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer />\r\n        <Navbar />\r\n        <div className=\"app-wrapper-content\">\r\n          <Switch>\r\n            <Route exact path=\"/\" render={() => <Redirect to=\"/profile\" />} />\r\n            <Route path=\"/profile/:userId?\" render={() => <ProfileContainer />} />\r\n            <Route path=\"/dialogs\" render={() => <SuspendedDialogs />} />\r\n            <Route path=\"/users\" render={() => <UsersPage pageTitle={'Users'} />} />\r\n            <Route path=\"/settings\" render={() => <News />} />\r\n            <Route path=\"/login\" render={() => <LoginPage />} />\r\n            <Route path=\"*\" render={() => <NotFound />} />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { initializeApp }),\r\n  withRouter,\r\n)(App);\r\n","import React from 'react';\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return (\r\n      <React.Suspense fallback={<div>loading...</div>}>\r\n        <WrappedComponent {...props} />\r\n      </React.Suspense>\r\n    );\r\n  };\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './redux/redux-store';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById('root'),\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/user.86a3e52d.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1jpOI\",\"error\":\"FormsControls_error__31Qb6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__3VpnW\",\"pageNumber\":\"Pagination_pageNumber__syIyC\",\"selectedPage\":\"Pagination_selectedPage__3Q5_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__15Miv\",\"name\":\"Header_name__3IDzf\",\"loginBlock\":\"Header_loginBlock__3cKxr\"};"],"sourceRoot":""}