{"version":3,"sources":["components/common/Pagination/Pagination.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Login/Login.module.css","redux/dialogs-reducer.ts","hoc/withAuthRedirect.tsx","components/Users/User/User.module.css","assets/images/preloader.svg","components/News/News.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileDataForm/ProfileDataFormReduxForm.module.css","components/NotFound/NotFound.module.css","components/common/FormsControls/FormsControls.tsx","utilities/validators/validators.ts","api/api.ts","api/profile-api.ts","redux/profile-reducer.ts","redux/sidebar-reducer.ts","api/users-api.ts","redux/users-reducer.ts","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/redux-store.ts","components/common/Pagination/Pagination.tsx","components/Users/User/User.tsx","redux/users-selectors.ts","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/common/Preloader/Preloader.tsx","components/Users/UsersPage.tsx","components/News/News.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileDataForm/ProfileDataFormReduxForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","components/Login/LoginPage.tsx","components/NotFound/NotFound.tsx","App.tsx","hoc/withSuspense.tsx","index.tsx","assets/images/user.png","components/common/FormsControls/FormsControls.module.css"],"names":["module","exports","initialState","dialogs","id","name","messages","message","actions","sendMessage","newMessageBody","type","dialogsReducer","state","action","body","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","Textarea","input","meta","touched","error","placeholder","hasError","className","styles","formControl","Input","required","value","maxLengthCreator","maxLength","length","resultCodesEnum","resultCodesForCaptcha","instance","axios","create","withCredentials","baseURL","headers","profileAPI","userId","get","then","res","data","status","put","photoFile","formData","FormData","append","profile","posts","likesCount","addPostActionCreator","newPostText","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","profileReducer","newPost","filter","p","sidebarReducer","usersAPI","currentPage","pageSize","term","friend","post","delete","users","portionSize","totalUsersCount","isFetching","followingInProgress","count","payload","requestUsers","items","totalCount","usersReducer","map","u","followed","authAPI","email","password","remeberMe","captcha","securityAPI","login","captchaUrl","getAuthUserData","meData","resultCode","Success","getCaptchaUrl","url","authReducer","initialized","appReducer","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","form","formReducer","app","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Pagination","onPageChanged","x","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","onClick","cn","selectedPage","pageNumber","key","User","unfollow","follow","user","style","avatar","alt","src","small","userPhoto","disabled","some","getUsers","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","usersSearchFormValidate","values","UsersSearchForm","React","memo","useSelector","enableReinitialize","initialValues","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","page","Number","query","pathname","followChanged","unfollowChanged","Preloader","preloader","UsersPage","pageTitle","News","main","Post","item","maxLength15","reduxForm","handleSubmit","Field","component","addPost","postsElements","reverse","postsBlock","ProfileStatusWithHooks","editMode","setEditMode","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","maxLength30","ProfileDataFormReduxForm","Object","keys","contacts","formSummaryError","ProfileData","isOwner","goToEditMode","facebook","website","vk","twitter","instagram","youtube","github","mainLink","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileInfo","savePhoto","saveProfile","description","large","target","files","Profile","ProfileContainer","this","match","params","authorizedUserId","getStatus","console","refreshProfile","prevProps","prevState","Component","file","getState","Error","stopSubmit","_error","Promise","reject","withRouter","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","Item","backgroundColor","icon","UserOutlined","LoginReduxForm","LoginPage","loginData","CaptchaIsRequired","loginInfo","NotFound","notfound","DialogsContainer","lazy","SuspendedDialogs","Suspense","fallback","App","initializeApp","SubMenu","Menu","Content","Footer","Sider","minHeight","padding","width","defaultSelectedKeys","height","title","LaptopOutlined","exact","path","render","textAlign","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8faad4e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__26P0o\",\"pageNumber\":\"Pagination_pageNumber__f5IhE\",\"selectedPage\":\"Pagination_selectedPage__27dlq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3DmI-\",\"posts\":\"MyPosts_posts__psJzG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formSummaryError\":\"Login_formSummaryError__wNlzF\",\"loginInfo\":\"Login_loginInfo__2jj3y\"};","import { InferActionsTypes } from './redux-store';\r\n\r\ntype DialogType = {\r\n  id: number;\r\n  name: string;\r\n};\r\n\r\ntype MessageType = {\r\n  id: number;\r\n  message: string;\r\n};\r\n\r\nlet initialState = {\r\n  dialogs: [\r\n    { id: 10, name: 'Jeniy' },\r\n    { id: 11, name: 'Dimych' },\r\n    { id: 12, name: 'Sveta' },\r\n    { id: 13, name: 'Sasha' },\r\n    { id: 14, name: 'Vika' },\r\n  ] as Array<DialogType>,\r\n  messages: [\r\n    { id: 1, message: 'Hi' },\r\n    { id: 2, message: 'How is your day' },\r\n    { id: 3, message: 'Yo' },\r\n    { id: 4, message: 'Yo' },\r\n    { id: 5, message: 'Yo' },\r\n  ] as Array<MessageType>,\r\n};\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SEND_MESSAGE': {\r\n      let body = action.newMessageBody;\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, { id: 6, message: body }],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  sendMessage: (newMessageBody: string) =>\r\n    ({\r\n      type: 'SEND_MESSAGE',\r\n      newMessageBody,\r\n    } as const),\r\n};\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { AppStateType } from '../redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) =>\r\n  ({\r\n    isAuth: state.auth.isAuth,\r\n  } as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n  isAuth: boolean;\r\n};\r\ntype DispatchPropsType = {};\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n    let { isAuth, ...restProps } = props;\r\n\r\n    if (!isAuth) return <Redirect to=\"/login\" />;\r\n\r\n    return <WrappedComponent {...(restProps as WCP)} />;\r\n  };\r\n\r\n  let ConnectedAuthRedirectComponent = connect<\r\n    MapPropsType,\r\n    DispatchPropsType,\r\n    WCP,\r\n    AppStateType\r\n  >(\r\n    mapStateToPropsForRedirect,\r\n    {},\r\n  )(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"User_avatar__1piZu\"};","module.exports = __webpack_public_path__ + \"static/media/preloader.5e382d7a.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"News_main__14RZT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__akpss\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileInfo_description__3H_7i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formSummaryError\":\"ProfileDataFormReduxForm_formSummaryError__4aq8t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notfound\":\"NotFound_notfound__3OeNG\"};","import React from 'react';\r\nimport styles from './FormsControls.module.css';\r\n\r\ntype PropsTypes = {\r\n  input: string;\r\n  meta: { touched: boolean; error: string };\r\n  type: string;\r\n  placeholder: string;\r\n};\r\n\r\nexport const Textarea: React.FC<PropsTypes> = ({\r\n  input,\r\n  meta: { touched, error },\r\n  type,\r\n  placeholder,\r\n}) => {\r\n  const hasError = touched && error;\r\n\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n      <textarea {...input} type={type} placeholder={placeholder} />\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Input: React.FC<PropsTypes> = ({\r\n  input,\r\n  meta: { touched, error },\r\n  type,\r\n  placeholder,\r\n}) => {\r\n  const hasError = touched && error;\r\n\r\n  return (\r\n    <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n      <input {...input} type={type} placeholder={placeholder} />\r\n      {hasError && <span>{error}</span>}\r\n    </div>\r\n  );\r\n};\r\n","export type FieldValidatorType = (value: string) => string | undefined;\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n  if (value) {\r\n    return undefined;\r\n  }\r\n\r\n  return 'Field is required';\r\n};\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n  if (value && value.length > maxLength) {\r\n    return `Max length is ${maxLength} symbols`;\r\n  }\r\n\r\n  return undefined;\r\n};\r\n","import axios from 'axios';\r\nimport { UserType } from '../types/types';\r\n\r\nexport const instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {\r\n    'API-KEY': 'a581eddc-6b2a-4437-9b2a-cfc6d6cb8bb3',\r\n  },\r\n});\r\n\r\nexport type APIResponseType<D = {}, RC = resultCodesEnum> = {\r\n  data: D;\r\n  messages: string[];\r\n  resultCode: RC;\r\n};\r\n\r\nexport enum resultCodesEnum {\r\n  Success = 0,\r\n  Error = 1,\r\n}\r\n\r\nexport enum resultCodesForCaptcha {\r\n  CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n  items: UserType[];\r\n  totalCount: number;\r\n  error: string | null;\r\n};\r\n","import { instance, APIResponseType } from './api';\r\nimport { PhotosType, ProfileType } from '../types/types';\r\n\r\ntype SavePhotoResponseDataType = {\r\n  photos: PhotosType;\r\n};\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: number) {\r\n    return instance.get<ProfileType>(`profile/${userId}`).then((res) => res.data);\r\n  },\r\n  getStatus(userId: number) {\r\n    return instance.get<string>(`profile/status/${userId}`).then((res) => res.data);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance\r\n      .put<APIResponseType>(`profile/status`, { status: status })\r\n      .then((res) => res.data);\r\n  },\r\n  savePhoto(photoFile: File) {\r\n    let formData = new FormData();\r\n    formData.append('image', photoFile);\r\n    return instance\r\n      .put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      })\r\n      .then((res) => res.data);\r\n  },\r\n  saveProfile(profile: ProfileType) {\r\n    return instance.put<APIResponseType>(`profile`, profile).then((res) => res.data);\r\n  },\r\n};\r\n","import { profileAPI } from '../api/profile-api';\r\nimport { stopSubmit, FormAction } from 'redux-form';\r\nimport { PostType, ProfileType, PhotosType } from '../types/types';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nconst initialState = {\r\n  posts: [\r\n    { id: 1, message: 'Hi, how are you?', likesCount: 5 },\r\n    { id: 2, message: \"I'ts my first post\", likesCount: 3 },\r\n    { id: 3, message: 'Yo', likesCount: 101 },\r\n  ] as Array<PostType>,\r\n  profile: null as ProfileType | null,\r\n  status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case 'ADD_POST': {\r\n      const newPost = {\r\n        id: 4,\r\n        message: action.newPostText,\r\n        likesCount: 0,\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost],\r\n      };\r\n    }\r\n    case 'SET_USER_PROFILE': {\r\n      return {\r\n        ...state,\r\n        profile: action.profile,\r\n      };\r\n    }\r\n    case 'SET_STATUS': {\r\n      return {\r\n        ...state,\r\n        status: action.status,\r\n      };\r\n    }\r\n    case 'DELETE_POST': {\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((p) => p.id !== action.postId),\r\n      };\r\n    }\r\n    case 'SAVE_PHOTO_SUCCESS': {\r\n      return {\r\n        ...state,\r\n        profile: { ...state.profile, photos: action.photos } as ProfileType,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  addPostActionCreator: (newPostText: string) =>\r\n    ({\r\n      type: 'ADD_POST',\r\n      newPostText,\r\n    } as const),\r\n  setUserProfile: (profile: ProfileType) =>\r\n    ({\r\n      type: 'SET_USER_PROFILE',\r\n      profile,\r\n    } as const),\r\n  setStatus: (status: string) =>\r\n    ({\r\n      type: 'SET_STATUS',\r\n      status,\r\n    } as const),\r\n  deletePost: (postId: number) =>\r\n    ({\r\n      type: 'DELETE_POST',\r\n      postId,\r\n    } as const),\r\n  savePhotoSuccess: (photos: PhotosType) =>\r\n    ({\r\n      type: 'SAVE_PHOTO_SUCCESS',\r\n      photos,\r\n    } as const),\r\n};\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getProfile(userId);\r\n  dispatch(actions.setUserProfile(data));\r\n};\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.getStatus(userId);\r\n  dispatch(actions.setStatus(data));\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n  try {\r\n    const data = await profileAPI.updateStatus(status);\r\n    if (data.resultCode === 0) {\r\n      dispatch(actions.setStatus(status));\r\n    }\r\n  } catch (error) {\r\n    //error handling\r\n  }\r\n};\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n  const data = await profileAPI.savePhoto(file);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.savePhotoSuccess(data.data.photos));\r\n  }\r\n};\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (\r\n  dispatch,\r\n  getState,\r\n) => {\r\n  const userId = getState().auth.id;\r\n  const data = await profileAPI.saveProfile(profile);\r\n  if (data.resultCode === 0) {\r\n    if (userId != null) {\r\n      dispatch(getUserProfile(userId));\r\n    } else {\r\n      throw new Error(\"userId can't be null\");\r\n    }\r\n  } else {\r\n    dispatch(stopSubmit('editProfile', { _error: data.messages[0] }));\r\n    return Promise.reject(data.messages[0]);\r\n  }\r\n};\r\n\r\nexport default profileReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;\r\n","const initialState = {};\r\n\r\nexport type initialStateType = typeof initialState;\r\n\r\nconst sidebarReducer = (state = initialState, action: any): initialStateType => {\r\n  return state;\r\n};\r\n\r\nexport default sidebarReducer;\r\n","import { GetItemsType, instance, APIResponseType } from './api';\r\n\r\nexport const usersAPI = {\r\n  getUsers(\r\n    currentPage = 1,\r\n    pageSize = 10,\r\n    term: string = '',\r\n    friend: null | boolean = null,\r\n  ) {\r\n    return instance\r\n      .get<GetItemsType>(\r\n        `users?page=${currentPage}&count=${pageSize}&term=${term}` +\r\n          (friend === null ? '' : `&friend=${friend}`),\r\n      )\r\n      .then((res) => res.data);\r\n  },\r\n  follow(userId: number) {\r\n    return instance.post<APIResponseType>(`follow/${userId}`).then((res) => res.data);\r\n  },\r\n  unfollow(userId: number) {\r\n    return instance.delete(`follow/${userId}`).then((res) => res.data) as Promise<\r\n      APIResponseType\r\n    >;\r\n  },\r\n};\r\n","import { usersAPI } from '../api/users-api';\r\nimport { UserType } from '../types/types';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nconst initialState = {\r\n  users: [] as UserType[],\r\n  pageSize: 10,\r\n  portionSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isFetching: true,\r\n  followingInProgress: [] as number[], //Array of users id\r\n  filter: {\r\n    term: '',\r\n    friend: null as null | boolean,\r\n  },\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case 'FOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: true };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n    case 'UNFOLLOW':\r\n      return {\r\n        ...state,\r\n        users: state.users.map((u) => {\r\n          if (u.id === action.userId) {\r\n            return { ...u, followed: false };\r\n          }\r\n          return u;\r\n        }),\r\n      };\r\n    case 'SET_USERS':\r\n      return {\r\n        ...state,\r\n        users: action.users,\r\n      };\r\n    case 'SET_CURRENT_PAGE':\r\n      return {\r\n        ...state,\r\n        currentPage: action.currentPage,\r\n      };\r\n    case 'SET_TOTAL_USERS_COUNT':\r\n      return {\r\n        ...state,\r\n        totalUsersCount: action.count,\r\n      };\r\n    case 'TOGGLE_IS_FETCHING':\r\n      return {\r\n        ...state,\r\n        isFetching: action.isFetching,\r\n      };\r\n    case 'TOGGLE_IS_FOLLOWING_PROGRESS':\r\n      return {\r\n        ...state,\r\n        followingInProgress: action.isFetching\r\n          ? [...state.followingInProgress, action.userId]\r\n          : state.followingInProgress.filter((id) => id !== action.userId),\r\n      };\r\n    case 'SN/USERS/SET_FILTER': {\r\n      return { ...state, filter: action.payload };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  followSuccess: (userId: number) =>\r\n    ({\r\n      type: 'FOLLOW',\r\n      userId,\r\n    } as const),\r\n\r\n  unfollowSuccess: (userId: number) =>\r\n    ({\r\n      type: 'UNFOLLOW',\r\n      userId,\r\n    } as const),\r\n\r\n  setUsers: (users: UserType[]) => ({ type: 'SET_USERS', users } as const),\r\n\r\n  setCurrentPage: (currentPage: number) =>\r\n    ({\r\n      type: 'SET_CURRENT_PAGE',\r\n      currentPage,\r\n    } as const),\r\n\r\n  setTotalUsersCount: (totalUsersCount: number) =>\r\n    ({\r\n      type: 'SET_TOTAL_USERS_COUNT',\r\n      count: totalUsersCount,\r\n    } as const),\r\n\r\n  toggleIsFetching: (isFetching: boolean) =>\r\n    ({\r\n      type: 'TOGGLE_IS_FETCHING',\r\n      isFetching,\r\n    } as const),\r\n\r\n  toggleFollowingProgress: (isFetching: boolean, userId: number) =>\r\n    ({\r\n      type: 'TOGGLE_IS_FOLLOWING_PROGRESS',\r\n      isFetching,\r\n      userId,\r\n    } as const),\r\n  setFilter: (filter: FilterType) =>\r\n    ({ type: 'SN/USERS/SET_FILTER', payload: filter } as const),\r\n};\r\n\r\nexport const requestUsers = (\r\n  currentPage: number,\r\n  pageSize: number,\r\n  filter: FilterType,\r\n): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleIsFetching(true));\r\n  dispatch(actions.setCurrentPage(currentPage));\r\n  dispatch(actions.setFilter(filter));\r\n\r\n  const data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n  dispatch(actions.toggleIsFetching(false));\r\n  dispatch(actions.setUsers(data.items));\r\n  dispatch(actions.setTotalUsersCount(data.totalCount));\r\n};\r\n\r\nexport const follow = (userId: number): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleFollowingProgress(true, userId));\r\n  const data = await usersAPI.follow(userId);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.followSuccess(userId));\r\n  }\r\n  dispatch(actions.toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport const unfollow = (userId: number): ThunkType => async (dispatch) => {\r\n  dispatch(actions.toggleFollowingProgress(true, userId));\r\n  const data = await usersAPI.unfollow(userId);\r\n  if (data.resultCode === 0) {\r\n    dispatch(actions.unfollowSuccess(userId));\r\n  }\r\n  dispatch(actions.toggleFollowingProgress(false, userId));\r\n};\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\nexport type FilterType = typeof initialState.filter;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n","import { instance, APIResponseType, resultCodesEnum, resultCodesForCaptcha } from './api';\r\n\r\ntype MeResponseDataType = {\r\n  id: number;\r\n  email: string;\r\n  login: string;\r\n};\r\n\r\ntype LoginResponseDataType = {\r\n  userId: number;\r\n};\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance\r\n      .get<APIResponseType<MeResponseDataType>>(`auth/me`)\r\n      .then((res) => res.data);\r\n  },\r\n  login(\r\n    email: string,\r\n    password: string,\r\n    remeberMe = false,\r\n    captcha: null | string = null,\r\n  ) {\r\n    return instance\r\n      .post<\r\n        APIResponseType<LoginResponseDataType, resultCodesEnum | resultCodesForCaptcha>\r\n      >(`auth/login`, {\r\n        email,\r\n        password,\r\n        remeberMe,\r\n        captcha,\r\n      })\r\n      .then((res) => res.data);\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`).then((res) => res.data);\r\n  },\r\n};\r\n","import { instance } from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n  url: string;\r\n};\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instance\r\n      .get<GetCaptchaUrlResponseType>(`security/get-captcha-url`)\r\n      .then((res) => res.data);\r\n  },\r\n};\r\n","import { FormAction, stopSubmit } from 'redux-form';\r\nimport { resultCodesEnum, resultCodesForCaptcha } from '../api/api';\r\nimport { authAPI } from '../api/auth-api';\r\nimport { securityAPI } from '../api/security-api';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nconst initialState = {\r\n  id: null as number | null,\r\n  email: null as string | null,\r\n  login: null as string | null,\r\n  isAuth: false,\r\n  captchaUrl: null as string | null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case 'SET_USER_DATA':\r\n    case 'SET_CAPTCHA_URL_SUCCESS':\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  setAuthUserData: (\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null,\r\n    isAuth: boolean,\r\n  ) =>\r\n    ({\r\n      type: 'SET_USER_DATA',\r\n      payload: { id, email, login, isAuth },\r\n    } as const),\r\n  getCaptchaUrlSuccess: (captchaUrl: string) =>\r\n    ({\r\n      type: 'SET_CAPTCHA_URL_SUCCESS',\r\n      payload: { captchaUrl },\r\n    } as const),\r\n};\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n  const meData = await authAPI.me();\r\n\r\n  if (meData.resultCode === resultCodesEnum.Success) {\r\n    const { id, login, email } = meData.data;\r\n    dispatch(actions.setAuthUserData(id, email, login, true));\r\n  }\r\n};\r\n\r\nexport const login = (\r\n  email: string,\r\n  password: string,\r\n  remeberMe: boolean,\r\n  captcha: string,\r\n): ThunkType => async (dispatch) => {\r\n  const loginData = await authAPI.login(email, password, remeberMe, captcha);\r\n  if (loginData.resultCode === resultCodesEnum.Success) {\r\n    //success, get auth data\r\n    dispatch(getAuthUserData());\r\n  } else {\r\n    if (loginData.resultCode === resultCodesForCaptcha.CaptchaIsRequired) {\r\n      dispatch(getCaptchaUrl());\r\n    }\r\n    const message =\r\n      loginData.messages.length > 0 ? loginData.messages[0] : 'Common error';\r\n    dispatch(stopSubmit('login', { _error: message }));\r\n  }\r\n};\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n  const data = await securityAPI.getCaptchaUrl();\r\n  const captchaUrl = data.url;\r\n  dispatch(actions.getCaptchaUrlSuccess(captchaUrl));\r\n};\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n  const logoutData = await authAPI.logout();\r\n  if (logoutData.resultCode === resultCodesEnum.Success) {\r\n    dispatch(actions.setAuthUserData(null, null, null, false));\r\n  }\r\n};\r\n\r\nexport default authReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes | FormAction>;\r\n","import { getAuthUserData } from './auth-reducer';\r\nimport { BaseThunkType, InferActionsTypes } from './redux-store';\r\n\r\nconst initialState = {\r\n  initialized: false,\r\n};\r\n\r\nconst appReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case 'INITIALIZED_SUCCESS':\r\n      return {\r\n        ...state,\r\n        initialized: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const actions = {\r\n  initializedSuccess: () =>\r\n    ({\r\n      type: 'INITIALIZED_SUCCESS',\r\n    } as const),\r\n};\r\n\r\nexport const initializeApp = () => {\r\n  return (dispatch: any) => {\r\n    const promise = dispatch(getAuthUserData());\r\n    promise.then(() => {\r\n      dispatch(actions.initializedSuccess());\r\n    });\r\n  };\r\n};\r\n\r\nexport default appReducer;\r\n\r\nexport type initialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>;\r\n","import { createStore, combineReducers, applyMiddleware, compose, Action } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport thunkMiddleware, { ThunkAction } from 'redux-thunk';\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from './auth-reducer';\r\nimport appReducer from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>; //Global State\r\n\r\nexport type InferActionsTypes<T> = T extends {\r\n  [keys: string]: (...args: any[]) => infer U;\r\n}\r\n  ? U\r\n  : never;\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<\r\n  R,\r\n  AppStateType,\r\n  unknown,\r\n  A\r\n>;\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware)),\r\n);\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;\r\n","import React, { useState } from 'react';\r\nimport styles from './Pagination.module.css';\r\nimport cn from 'classnames';\r\n\r\ntype PropsType = {\r\n  totalUsersCount: number;\r\n  pageSize: number;\r\n  currentPage?: number;\r\n  onPageChanged: (pageNumber: number) => void;\r\n  portionSize?: number;\r\n};\r\n\r\nconst Pagination: React.FC<PropsType> = ({\r\n  totalUsersCount,\r\n  pageSize,\r\n  currentPage = 1,\r\n  onPageChanged = (x) => x,\r\n  portionSize = 10,\r\n}) => {\r\n  let pagesCount = Math.ceil(totalUsersCount / pageSize);\r\n\r\n  let pages: number[] = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  let portionCount = Math.ceil(pagesCount / portionSize);\r\n  let [portionNumber, setPortionNumber] = useState(1);\r\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  return (\r\n    <div className={styles.pagination}>\r\n      {portionNumber > 1 && (\r\n        <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>\r\n      )}\r\n      {pages\r\n        .filter((p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n        .map((p) => {\r\n          return (\r\n            <span\r\n              className={cn(\r\n                {\r\n                  [styles.selectedPage]: currentPage === p,\r\n                },\r\n                styles.pageNumber,\r\n              )}\r\n              key={p}\r\n              onClick={() => {\r\n                onPageChanged(p);\r\n              }}>\r\n              {p}\r\n            </span>\r\n          );\r\n        })}\r\n      {portionCount > portionNumber && (\r\n        <button\r\n          onClick={() => {\r\n            setPortionNumber(portionNumber + 1);\r\n          }}>\r\n          NEXT\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport style from './User.module.css';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n  key: number;\r\n  user: UserType;\r\n  followingInProgress: number[];\r\n  unfollow: (userId: number) => void;\r\n  follow: (userId: number) => void;\r\n};\r\n\r\nconst User: React.FC<PropsType> = ({\r\n  followingInProgress,\r\n  unfollow,\r\n  follow,\r\n  user,\r\n  key,\r\n}) => {\r\n  return (\r\n    <div key={key}>\r\n      <span>\r\n        <div className={style.avatar}>\r\n          <NavLink to={'/profile/' + user.id}>\r\n            <img\r\n              alt=\"Avatar\"\r\n              src={user.photos.small != null ? user.photos.small : userPhoto}\r\n            />\r\n          </NavLink>\r\n        </div>\r\n        <div>\r\n          {user.followed ? (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                unfollow(user.id);\r\n              }}>\r\n              Unfollow\r\n            </button>\r\n          ) : (\r\n            <button\r\n              disabled={followingInProgress.some((id) => id === user.id)}\r\n              onClick={() => {\r\n                follow(user.id);\r\n              }}>\r\n              Follow\r\n            </button>\r\n          )}\r\n        </div>\r\n      </span>\r\n      <span>\r\n        <span>\r\n          <div>{user.name}</div>\r\n          <div>{user.status}</div>\r\n        </span>\r\n        <span>\r\n          <div>{'user.location.country'}</div>\r\n          <div>{'user.location.city'}</div>\r\n        </span>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import { AppStateType } from './redux-store';\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n  return state.usersPage.users;\r\n};\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n  return state.usersPage.pageSize;\r\n};\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n  return state.usersPage.totalUsersCount;\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n  return state.usersPage.currentPage;\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n  return state.usersPage.isFetching;\r\n};\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n  return state.usersPage.followingInProgress;\r\n};\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n  return state.usersPage.filter;\r\n};\r\n\r\nexport const getPortionSize = (state: AppStateType) => {\r\n  return state.usersPage.portionSize;\r\n};\r\n","import { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { FilterType } from '../../redux/users-reducer';\r\nimport { getUsersFilter } from '../../redux/users-selectors';\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n  const errors = {};\r\n  return errors;\r\n};\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null';\r\n\r\ntype FormType = {\r\n  term: string;\r\n  friend: FriendFormType;\r\n};\r\n\r\ntype PropsType = {\r\n  onFilterChanged: (filter: FilterType) => void;\r\n};\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n  const submit = (\r\n    values: FormType,\r\n    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void },\r\n  ) => {\r\n    const filter: FilterType = {\r\n      term: values.term,\r\n      friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false,\r\n    };\r\n\r\n    props.onFilterChanged(filter);\r\n    setSubmitting(false);\r\n  };\r\n\r\n  const filter = useSelector(getUsersFilter);\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        initialValues={{\r\n          term: filter.term,\r\n          friend: String(filter.friend) as FriendFormType,\r\n        }}\r\n        validate={usersSearchFormValidate}\r\n        onSubmit={submit}>\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Field type=\"text\" name=\"term\" />\r\n\r\n            <Field name=\"friend\" as=\"select\">\r\n              <option value=\"null\">All</option>\r\n              <option value=\"true\">Only followed</option>\r\n              <option value=\"false\">Only unfollowed</option>\r\n            </Field>\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Find\r\n            </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useEffect } from 'react';\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport User from './User/User';\r\nimport { FilterType, follow, requestUsers, unfollow } from '../../redux/users-reducer';\r\nimport { UsersSearchForm } from './UsersSearchForm';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  getCurrentPage,\r\n  getFollowingInProgress,\r\n  getPageSize,\r\n  getTotalUsersCount,\r\n  getUsers,\r\n  getUsersFilter,\r\n} from '../../redux/users-selectors';\r\nimport { useHistory } from 'react-router-dom';\r\nimport * as queryString from 'querystring';\r\n\r\ntype PropsType = {};\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\n\r\nexport const Users: React.FC<PropsType> = () => {\r\n  const users = useSelector(getUsers);\r\n  const totalUsersCount = useSelector(getTotalUsersCount);\r\n  const currentPage = useSelector(getCurrentPage);\r\n  const pageSize = useSelector(getPageSize);\r\n  const filter = useSelector(getUsersFilter);\r\n  const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const parsed = queryString.parse(\r\n      history.location.search.substr(1),\r\n    ) as QueryParamsType;\r\n\r\n    let actualPage = currentPage;\r\n    let actualFilter = filter;\r\n\r\n    if (!!parsed.page) {\r\n      actualPage = Number(parsed.page);\r\n    }\r\n    if (!!parsed.term) {\r\n      actualFilter = { ...actualFilter, term: parsed.term as string };\r\n    }\r\n\r\n    switch (parsed.friend) {\r\n      case 'null':\r\n        actualFilter = { ...actualFilter, friend: null };\r\n        break;\r\n      case 'true':\r\n        actualFilter = { ...actualFilter, friend: true };\r\n        break;\r\n      case 'false':\r\n        actualFilter = { ...actualFilter, friend: false };\r\n        break;\r\n    }\r\n\r\n    dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const query: QueryParamsType = {};\r\n\r\n    if (!!filter.term) query.term = filter.term;\r\n    if (filter.friend !== null) query.friend = String(filter.friend);\r\n    if (currentPage !== 1) query.page = String(currentPage);\r\n\r\n    history.push({\r\n      pathname: '/users',\r\n      search: queryString.stringify(query),\r\n    });\r\n  }, [filter, currentPage, history]);\r\n\r\n  const onPageChanged = (pageNumber: number) => {\r\n    dispatch(requestUsers(pageNumber, pageSize, filter));\r\n  };\r\n  const onFilterChanged = (filter: FilterType) => {\r\n    dispatch(requestUsers(1, pageSize, filter));\r\n  };\r\n  const followChanged = (userId: number) => {\r\n    dispatch(follow(userId));\r\n  };\r\n  const unfollowChanged = (userId: number) => {\r\n    dispatch(unfollow(userId));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <UsersSearchForm onFilterChanged={onFilterChanged} />\r\n      <Pagination\r\n        totalUsersCount={totalUsersCount}\r\n        pageSize={pageSize}\r\n        currentPage={currentPage}\r\n        onPageChanged={onPageChanged}\r\n      />\r\n      <div>\r\n        {users.map((user) => (\r\n          <User\r\n            user={user}\r\n            followingInProgress={followingInProgress}\r\n            key={user.id}\r\n            follow={followChanged}\r\n            unfollow={unfollowChanged}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport preloader from '../../../assets/images/preloader.svg';\r\n\r\nconst Preloader: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <img src={preloader} alt=\"preloader\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Users } from './Users';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { getIsFetching } from '../../redux/users-selectors';\r\n\r\ntype PropsType = {\r\n  pageTitle: string;\r\n};\r\n\r\nexport const UsersPage: React.FC<PropsType> = (props) => {\r\n  const isFetching = useSelector(getIsFetching);\r\n  return (\r\n    <>\r\n      <h2>{props.pageTitle}</h2>\r\n      {isFetching ? <Preloader /> : null}\r\n      <Users />\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport style from './News.module.css';\r\n\r\ntype PropsType = {};\r\n\r\nconst News: React.FC<PropsType> = () => {\r\n  return (\r\n    <div className={style.main}>\r\n      <p>There will be news</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default News;\r\n","import React from 'react';\r\nimport style from './Post.module.css';\r\nimport userPhoto from '../../../../assets/images/user.png';\r\n\r\ntype PropsType = {\r\n  message: string;\r\n  likesCount: number;\r\n};\r\n\r\nconst Post: React.FC<PropsType> = ({ message, likesCount }) => {\r\n  return (\r\n    <div className={style.item}>\r\n      <img src={userPhoto} alt=\"user\"></img>\r\n      {message}\r\n      <div>\r\n        <span>like </span>\r\n        {likesCount}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\n\r\nimport { required, maxLengthCreator } from '../../../utilities/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength15 = maxLengthCreator(15);\r\n\r\nexport type AddPostFormValuesType = {\r\n  newPostText: string;\r\n};\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType>> = ({\r\n  handleSubmit,\r\n}) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Field\r\n          type=\"textarea\"\r\n          name=\"newPostText\"\r\n          component={Textarea}\r\n          placeholder=\"Enter your text\"\r\n          validate={[required, maxLength15]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">Add post</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default reduxForm<AddPostFormValuesType>({\r\n  form: 'profileAddPostForm',\r\n})(AddPostForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport style from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport AddPostForm from './AddPostForm';\r\nimport { actions } from '../../../redux/profile-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostType } from '../../../types/types';\r\nimport { AddPostFormValuesType } from './AddPostForm';\r\n\r\nexport type MapPropsType = {\r\n  posts: Array<PostType>;\r\n};\r\nexport type DispatchPropsType = {\r\n  addPost: (newPostText: string) => void;\r\n};\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n  let postsElements = [...props.posts]\r\n    .reverse()\r\n    .map((post) => (\r\n      <Post message={post.message} key={post.id} likesCount={post.likesCount} />\r\n    ));\r\n\r\n  let onAddPost = (values: AddPostFormValuesType) => {\r\n    props.addPost(values.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={style.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostForm onSubmit={onAddPost} />\r\n      <div className={style.posts}>{postsElements}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  };\r\n};\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, {}, AppStateType>(\r\n  mapStateToProps,\r\n  {\r\n    addPost: actions.addPostActionCreator,\r\n  },\r\n)(MyPosts);\r\n","import React, { useState, useEffect, ChangeEvent } from 'react';\r\n\r\ntype PropsType = {\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n};\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!editMode && (\r\n        <div>\r\n          <b>Status: </b>\r\n          <span onDoubleClick={activateEditMode}>{props.status || 'not status'}</span>\r\n        </div>\r\n      )}\r\n      {editMode && (\r\n        <div>\r\n          <input\r\n            autoFocus={true}\r\n            onBlur={deactivateEditMode}\r\n            onChange={onStatusChange}\r\n            type=\"text\"\r\n            value={status}\r\n          />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import React from 'react';\r\nimport styles from './ProfileDataFormReduxForm.module.css';\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from '../../../utilities/validators/validators';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\ntype PropsType = {\r\n  profile: ProfileType;\r\n};\r\n\r\nconst ProfileDataForm: React.FC<\r\n  InjectedFormProps<ProfileType, PropsType> & PropsType\r\n> = ({ handleSubmit, error, profile }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        Full name:\r\n        <Field\r\n          name=\"fullName\"\r\n          type=\"text\"\r\n          placeholder=\"Full name\"\r\n          component={Input}\r\n          validate={[required, maxLength30]}\r\n        />\r\n      </div>\r\n      <div>\r\n        About me:\r\n        <Field\r\n          name=\"aboutMe\"\r\n          type=\"text\"\r\n          placeholder=\"About me\"\r\n          component={Input}\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        Looking for a job:\r\n        <Field name=\"lookingForAJob\" type=\"checkbox\" component={Input} />\r\n      </div>\r\n      <div>\r\n        My professional skills:\r\n        <Field\r\n          name=\"lookingForAJobDescription\"\r\n          type=\"text\"\r\n          placeholder=\"My professional skills\"\r\n          component={Textarea}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        Contacts:\r\n        {Object.keys(profile.contacts).map((key) => {\r\n          return (\r\n            <div key={key}>\r\n              {key}:\r\n              <Field name={'contacts.' + key} type=\"text\" component={Input} />\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {error && <div className={styles.formSummaryError}>{error}</div>}\r\n\r\n      <div>\r\n        <button type=\"submit\">Save</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({\r\n  form: 'editProfile',\r\n})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport style from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from '../ProfileStatus/ProfileStatusWithHooks';\r\nimport ProfileDataFormReduxForm from '../ProfileDataForm/ProfileDataFormReduxForm';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  if (!profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const onMainFotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData: ProfileType) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  const goToEditMode = () => setEditMode(true);\r\n\r\n  return (\r\n    <div>\r\n      <div className={style.description}>\r\n        <div>\r\n          <img src={profile.photos.large || userPhoto} alt=\"Large avatar\" />\r\n          {isOwner && (\r\n            <div>\r\n              <b>Change Avatar: </b>\r\n              <input type=\"file\" onChange={onMainFotoSelected} />\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n\r\n        {editMode ? (\r\n          <ProfileDataFormReduxForm\r\n            initialValues={profile}\r\n            onSubmit={onSubmit}\r\n            profile={profile}\r\n          />\r\n        ) : (\r\n          <ProfileData profile={profile} isOwner={isOwner} goToEditMode={goToEditMode} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype ProfileDataPropsType = {\r\n  profile: ProfileType;\r\n  isOwner: boolean;\r\n  goToEditMode: () => void;\r\n};\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({\r\n  profile,\r\n  isOwner,\r\n  goToEditMode,\r\n}) => {\r\n  const {\r\n    facebook,\r\n    website,\r\n    vk,\r\n    twitter,\r\n    instagram,\r\n    youtube,\r\n    github,\r\n    mainLink,\r\n  } = profile.contacts;\r\n\r\n  return (\r\n    <div>\r\n      <div>Full name: {profile.fullName}</div>\r\n      <div>About me: {profile.aboutMe}</div>\r\n      <div>Looking for a job: {profile.lookingForAJob ? 'Yes' : 'No'}</div>\r\n      {profile.lookingForAJob && (\r\n        <div>My professional skills: {profile.lookingForAJobDescription}</div>\r\n      )}\r\n\r\n      <div>\r\n        Contacts:\r\n        {facebook ? <div>Facebook: {facebook}</div> : null}\r\n        {website ? <div>Website: {website}</div> : null}\r\n        {vk ? <div>VK: {vk}</div> : null}\r\n        {twitter ? <div>Twitter: {twitter}</div> : null}\r\n        {instagram ? <div>Instagram: {instagram}</div> : null}\r\n        {youtube ? <div>Youtube: {youtube}</div> : null}\r\n        {github ? <div>Github: {github}</div> : null}\r\n        {mainLink ? <div>MainLink: {mainLink}</div> : null}\r\n      </div>\r\n      {isOwner && (\r\n        <div>\r\n          <button onClick={goToEditMode}>Edit</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport { ProfileType } from '../../types/types';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n  profile: ProfileType | null;\r\n  status: string;\r\n  updateStatus: (status: string) => void;\r\n  isOwner: boolean;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\nconst Profile: React.FC<PropsType> = ({\r\n  profile,\r\n  status,\r\n  updateStatus,\r\n  isOwner,\r\n  savePhoto,\r\n  saveProfile,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        isOwner={isOwner}\r\n        profile={profile}\r\n        status={status}\r\n        updateStatus={updateStatus}\r\n        savePhoto={savePhoto}\r\n        saveProfile={saveProfile}\r\n      />\r\n      <MyPosts />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import React, { Component } from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  getUserProfile,\r\n  getStatus,\r\n  updateStatus,\r\n  savePhoto,\r\n  saveProfile,\r\n} from '../../redux/profile-reducer';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { ProfileType } from '../../types/types';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  getUserProfile: (userId: number) => void;\r\n  getStatus: (userId: number) => void;\r\n  updateStatus: (status: string) => void;\r\n  savePhoto: (file: File) => void;\r\n  saveProfile: (profile: ProfileType) => Promise<any>;\r\n};\r\n\r\ntype PathParamsType = {\r\n  userId: string;\r\n};\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends Component<PropsType> {\r\n  refreshProfile() {\r\n    let userId: number | null = +this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        // todo: may be replace push with Redirect??\r\n        this.props.history.push('/login');\r\n      }\r\n    }\r\n\r\n    if (!userId) {\r\n      console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\r\n    } else {\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Profile\r\n          {...this.props}\r\n          isOwner={!this.props.match.params.userId}\r\n          profile={this.props.profile}\r\n          status={this.props.status}\r\n          updateStatus={this.props.updateStatus}\r\n          savePhoto={this.props.savePhoto}\r\n          saveProfile={this.props.saveProfile}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect,\r\n)(ProfileContainer);\r\n","import { AppStateType } from './redux-store';\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n  return state.auth.isAuth;\r\n};\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n  return state.auth.login;\r\n};\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport s from './Header.module.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Avatar, Button, Col, Row } from 'antd';\r\nimport { Layout, Menu } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport { selectIsAuth, selectCurrentUserLogin } from '../../redux/auth-selectors';\r\nimport { logout } from '../../redux/auth-reducer';\r\n\r\nexport type MapPropsType = {};\r\n\r\nexport const Header: React.FC<MapPropsType> = () => {\r\n  const isAuth = useSelector(selectIsAuth);\r\n  const login = useSelector(selectCurrentUserLogin);\r\n\r\n  const dispatch = useDispatch();\r\n  const logoutCallback = () => {\r\n    dispatch(logout());\r\n  };\r\n\r\n  const { Header } = Layout;\r\n\r\n  return (\r\n    <Header className=\"header\">\r\n      <div className=\"logo\" />\r\n      <Row>\r\n        <Col span={18}>\r\n          <Menu theme=\"dark\" mode=\"horizontal\">\r\n            <Menu.Item key=\"1\">\r\n              <Link to=\"/\">Home</Link>\r\n            </Menu.Item>\r\n          </Menu>\r\n        </Col>\r\n\r\n        {isAuth ? (\r\n          <>\r\n            <Col span={1}>\r\n              <Avatar\r\n                alt={login || 'user'}\r\n                style={{ backgroundColor: '#87d068' }}\r\n                icon={<UserOutlined />}\r\n              />\r\n            </Col>\r\n            <Col span={5}>\r\n              <Button onClick={logoutCallback}>Log out </Button>\r\n            </Col>\r\n          </>\r\n        ) : (\r\n          <Col span={6}>\r\n            <Button>\r\n              <Link to=\"/login\">Sign in </Link>\r\n            </Button>\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </Header>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styles from './Login.module.css';\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../utilities/validators/validators';\r\nimport { Input } from '../common/FormsControls/FormsControls';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { login } from '../../redux/auth-reducer';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\ntype LoginFormOwnProps = {\r\n  captchaUrl: string | null;\r\n};\r\n\r\nconst LoginForm: React.FC<\r\n  InjectedFormProps<LoginFormType, LoginFormOwnProps> & LoginFormOwnProps\r\n> = ({ handleSubmit, error, captchaUrl }) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <Field\r\n            name=\"email\"\r\n            type=\"text\"\r\n            placeholder=\"Email\"\r\n            component={Input}\r\n            validate={[required, maxLength30]}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Field\r\n            name=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            component={Input}\r\n            validate={[required, maxLength30]}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Field name=\"rememberMe\" type=\"checkbox\" component={Input} />\r\n          remember me\r\n        </div>\r\n        {captchaUrl && <img alt=\"captcha\" src={captchaUrl} />}\r\n        {captchaUrl && (\r\n          <Field\r\n            name=\"captcha\"\r\n            type=\"text\"\r\n            placeholder=\"Enter characters\"\r\n            component={Input}\r\n            validate={[required]}\r\n          />\r\n        )}\r\n        {error && <div className={styles.formSummaryError}>{error}</div>}\r\n        <div>\r\n          <button type=\"submit\">Login</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormType, LoginFormOwnProps>({\r\n  form: 'login',\r\n})(LoginForm);\r\n\r\ntype LoginFormType = {\r\n  captcha: string;\r\n  remeberMe: boolean;\r\n  password: string;\r\n  email: string;\r\n};\r\n\r\nexport const LoginPage: React.FC = () => {\r\n  const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl);\r\n  const isAuth = useSelector((state: AppStateType) => state.auth.isAuth);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (formData: LoginFormType) => {\r\n    const { email, password, remeberMe, captcha } = formData;\r\n    dispatch(login(email, password, remeberMe, captcha));\r\n  };\r\n\r\n  if (isAuth) {\r\n    return <Redirect to=\"/profile\" />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <h1>Login</h1>\r\n      <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n      <div className={styles.loginInfo}>\r\n        <p>If you don't have an account, use test login and password.</p>\r\n        <p>Login: free@samuraijs.com</p>\r\n        <p>Password: free</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport style from './NotFound.module.css';\r\n\r\nconst NotFound: React.FC = () => {\r\n  return <h2 className={style.notfound}>404 Page not found</h2>;\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { Component, lazy } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { Route, withRouter, Switch, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\nimport { UserOutlined, LaptopOutlined } from '@ant-design/icons';\r\nimport { UsersPage } from './components/Users/UsersPage';\r\nimport News from './components/News/News';\r\nimport ProfileContainer from './components/Profile/ProfileContainer';\r\nimport { Header } from './components/Header/Header';\r\nimport { LoginPage } from './components/Login/LoginPage';\r\nimport { initializeApp } from './redux/app-reducer';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport NotFound from './components/NotFound/NotFound';\r\nimport { AppStateType } from './redux/redux-store';\r\nimport { withSuspense } from './hoc/withSuspense';\r\n\r\nconst DialogsContainer = lazy(() => import('./components/Dialogs/DialogsContainer'));\r\nconst SuspendedDialogs = withSuspense(DialogsContainer);\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void;\r\n};\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader />;\r\n    }\r\n\r\n    const { SubMenu } = Menu;\r\n    const { Content, Footer, Sider } = Layout;\r\n\r\n    return (\r\n      <Layout style={{ minHeight: '100vh' }}>\r\n        <Header />\r\n        <Content style={{ padding: '0 50px' }}>\r\n          <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\r\n            <Sider className=\"site-layout-background\" width={200}>\r\n              <Menu\r\n                mode=\"inline\"\r\n                defaultSelectedKeys={['1']}\r\n                // defaultOpenKeys={['sub1']}\r\n                style={{ height: '100%' }}>\r\n                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\r\n                  <Menu.Item key=\"1\">\r\n                    <Link to=\"/profile\">Profile</Link>\r\n                  </Menu.Item>\r\n                  <Menu.Item key=\"2\">\r\n                    <Link to=\"/dialogs\">Messages</Link>\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n                <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"All Users\">\r\n                  <Menu.Item key=\"5\">\r\n                    <Link to=\"/users\">Users</Link>\r\n                  </Menu.Item>\r\n                </SubMenu>\r\n                <Menu.Item key=\"12\">\r\n                  <Link to=\"/news\">News</Link>\r\n                </Menu.Item>\r\n              </Menu>\r\n            </Sider>\r\n            <Content style={{ padding: '0 24px', minHeight: 280 }}>\r\n              <Switch>\r\n                <Route exact path=\"/\" render={() => <Redirect to=\"/profile\" />} />\r\n                <Route path=\"/profile/:userId?\" render={() => <ProfileContainer />} />\r\n                <Route path=\"/dialogs\" render={() => <SuspendedDialogs />} />\r\n                <Route path=\"/users\" render={() => <UsersPage pageTitle={'Users'} />} />\r\n                <Route path=\"/news\" render={() => <News />} />\r\n                <Route path=\"/login\" render={() => <LoginPage />} />\r\n                <Route path=\"*\" render={() => <NotFound />} />\r\n              </Switch>\r\n            </Content>\r\n          </Layout>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>\r\n          Social Network ©2020 Created by Evgeniy Nechetov\r\n        </Footer>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n});\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, { initializeApp }),\r\n  withRouter,\r\n)(App);\r\n","import React from 'react';\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n  return (props: WCP) => {\r\n    return (\r\n      <React.Suspense fallback={<div>loading...</div>}>\r\n        <WrappedComponent {...props} />\r\n      </React.Suspense>\r\n    );\r\n  };\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './redux/redux-store';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById('root'),\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/user.86a3e52d.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3rgEA\",\"error\":\"FormsControls_error__1SmHv\"};"],"sourceRoot":""}